import aiogram
import asyncio
import random
import time
import sqlite3
from datetime import timedelta
from aiogram import types
from aiogram import exceptions
from aiogram.types import message
from aiogram import Bot, types, Dispatcher, executor
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.types import KeyboardButton

bot = aiogram.Bot(token='-')
dp = aiogram.Dispatcher(bot)

allowed_user_id = [1108449415, 1129234807]

balances = {}

towns = {}

last_command_executed = {}

is_update_income_running = {}

winner_name = ""

list_id = []

conn = sqlite3.connect('bot_data.db')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS balances
                  (user_id INTEGER PRIMARY KEY, balance INTEGER)''')
conn.commit()

cursor.execute('''CREATE TABLE IF NOT EXISTS towns
                  (user_id INTEGER PRIMARY KEY, name TEXT, army_level INTEGER, health_level INTEGER, courp_level INTEGER, road_level INTEGER, dolar_level INTEGER, food_level INTEGER, build_level INTEGER, upgraded_income INTEGER, change_count INTEGER, change_allowed INTEGER)''')
conn.commit()

cursor.execute("CREATE TABLE IF NOT EXISTS user_income (user_id INTEGER PRIMARY KEY, income INTEGER DEFAULT 0)")
conn.commit()


@dp.message_handler(commands=['start'])
async def main_command_handler(message: aiogram.types.Message):
    user_id = message.from_user.id
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –°–æ–∑–¥–∞–π —Å–≤–æ—ë –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ –∏ —Å—Ç–∞–Ω—å –ª—É—á—à–∏–º!\n –ù–∞–∂–º–∏ /create")


user_steps = {}


@dp.message_handler(commands=['change'])
async def change_command_handler(message: aiogram.types.Message):
    user_id = message.from_user.id

    cursor.execute("SELECT name, change_count FROM towns WHERE user_id=?", (user_id,))
    result = cursor.fetchone()

    if not result:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –≥–æ—Ä–æ–¥.")
        return

    city_name, change_count = result
    change_count = change_count if change_count else 0
    change_price = 5000 * (10 ** change_count)

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.row(
        types.InlineKeyboardButton("–î–∞", callback_data="confirm_change"),
        types.InlineKeyboardButton("–ù–µ—Ç", callback_data="cancel_change")
    )

    await message.reply(
        f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞?\n"
        f"–¶–µ–Ω–∞: {change_price}TSC.\n\n"
        f"–¢–µ–∫—É—â–µ–µ –∏–º—è –≥–æ—Ä–æ–¥–∞: {city_name}",
        reply_markup=inline_keyboard
    )

    user_steps[user_id] = 1


@dp.callback_query_handler(lambda callback_query: callback_query.data in ['confirm_change', 'cancel_change'])
async def process_change_confirmation(callback_query: aiogram.types.CallbackQuery):
    user_id = callback_query.from_user.id

    if callback_query.data == 'confirm_change':
        current_balance = get_user_balance(user_id)
        change_count = get_change_count(user_id)
        change_count = change_count if change_count else 0
        change_price = 500 * (10 ** change_count)

        if current_balance < change_price:
            await callback_query.message.edit_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞.")
            return

        await callback_query.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")

        user_steps[user_id] = 2


@dp.message_handler(lambda message: user_steps.get(message.from_user.id) == 2)
async def process_new_city_name(message: aiogram.types.Message):
    user_id = message.from_user.id
    new_city_name = message.text.strip()

    if new_city_name:
        cursor.execute("SELECT name FROM towns WHERE LOWER(name) = LOWER(?)", (new_city_name,))
        result = cursor.fetchone()

        if result:
            await message.reply("–≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
            return

        current_balance = get_user_balance(user_id)
        change_count = get_change_count(user_id)
        change_count = change_count if change_count else 0
        change_price = 500 * (10 ** change_count)

        if current_balance < change_price:
            await message.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞.")
            return

        cursor.execute("UPDATE towns SET name=?, change_count=? WHERE user_id=?",
                       (new_city_name, change_count + 1, user_id))
        conn.commit()

        update_user_balance(user_id, -change_price)

        await message.reply(f"–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_city_name}.")

        user_steps[user_id] = 1


def get_change_count(user_id):
    cursor.execute("SELECT change_count FROM towns WHERE user_id=?", (user_id,))
    result = cursor.fetchone()

    return result[0] if result else 0


@dp.message_handler(commands=['donat'])
async def main_command_handler(message: aiogram.types.Message):
    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.add(types.InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", url="https://t.me/RudeusNG"))
    await message.answer(
        '–î–æ–Ω–∞—Ç:\n\n–ü–æ–∫—É–ø–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ 1:100.000\n(–¶–µ–Ω–∞ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å—Å—è\n –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—É–º–º–∞—Ä–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –≤–∞—à–µ–≥–æ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞!)\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µüëáüèª',
        reply_markup=inline_keyboard)


@dp.message_handler(commands=['JHKL'])
async def main_command_handler(message: aiogram.types.Message):
    promo_mon = 100000
    user_id = message.from_user.id

    if user_id not in list_id:
        list_id.append(user_id)
        # recipient_id = message.reply_to_message.from_user.id
        recipient_id = message.from_user.id
        update_user_balance(recipient_id, promo_mon)
        await message.answer(f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {promo_mon}TSC.")

    else:
        await message.answer('–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –¥–µ–Ω—å–≥–∏ —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞!\n–ñ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ!')
        print(list_id)


@dp.message_handler(commands=['info'])
async def main_command_handler(message: aiogram.types.Message):
    await message.answer(
        '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: The Sovereign‚Äôs Circle\n\n–í–µ—Ä—Å–∏—è: v2.5\n–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: 01.10.2023')


us_lis = []


@dp.message_handler(regexp=r'^–∫—É–±–∏–∫ (\d+)$')
async def initiate_dice_game(message: types.Message):
    user_id = message.from_user.id
    amount = int(message.text.split()[1])

    reply_message = message.reply_to_message
    recipient = reply_message.from_user

    us_lis.append(user_id)
    us_lis.append(recipient)

    if len(us_lis) > 2:
        await message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —É–∂–µ –∏–≥—Ä–∞—é—Ç, –¥–æ–∂–¥–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –æ—á–µ—Ä–µ–¥–∏')
        return

    if not recipient:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")
        return

    if recipient.id == user_id:
        await message.reply("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å —Å–∞–º–∏ —Å —Å–æ–±–æ–π")
        return

    recipient_mention = recipient.get_mention(as_html=True)
    recipient_username = recipient.username
    if not recipient_username:
        recipient_username = recipient.first_name

    recipient_id = recipient.id

    sender_balance = get_user_balance(user_id)
    recipient_balance = get_user_balance(recipient_id)

    if sender_balance < amount and recipient_balance > amount:
        await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")
        del us_lis[:]
        return

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.row(
        types.InlineKeyboardButton("‚úÖÔ∏è–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤‚úÖÔ∏è",
                                   callback_data=f"dice_challenge_accept:{amount}:{user_id}:{recipient_id}"),
        types.InlineKeyboardButton("‚ùåÔ∏è–æ—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–∑–æ–≤‚ùåÔ∏è",
                                   callback_data=f"dice_challenge_decline:{user_id}:{recipient_id}")
    )

    await message.reply(
        f"{recipient_mention}, –≤–∞—Å –≤—ã–∑—ã–≤–∞—é—Ç –Ω–∞ –∏–≥—Ä—É –≤ –∫—É–±–∏–∫!\n–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: {amount} TSC",
        reply_markup=inline_keyboard,
        parse_mode=types.ParseMode.HTML
    )

    await asyncio.sleep(20)
    await message.answer('–í—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ–∫–æ–Ω—á–µ–Ω–æ')
    del us_lis[:]


@dp.callback_query_handler(lambda c: c.data.startswith('dice_challenge_accept'))
async def accept_dice_challenge_handler(callback_query: types.CallbackQuery):
    challenge_data = callback_query.data.split(":")
    amount = int(challenge_data[1])
    challenger_id = int(challenge_data[2])
    recipient_id = int(challenge_data[3])
    challenger = await bot.get_chat_member(chat_id=callback_query.message.chat.id, user_id=challenger_id)
    recipient = await bot.get_chat_member(chat_id=callback_query.message.chat.id, user_id=recipient_id)

    if callback_query.from_user.id != recipient_id:
        await callback_query.answer("–ù–µ –≤–∞–º –≤—ã–∑–æ–≤!", show_alert=True)
        return
    await callback_query.message.delete()

    floe_message = await bot.send_message(chat_id=callback_query.message.chat.id, text="–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...")
    floe_message_id = floe_message.message_id

    await asyncio.sleep(1)

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=floe_message_id)

    recipient_message = await bot.send_message(chat_id=callback_query.message.chat.id,
                                               text=f"{challenger.user.mention} –±—Ä–æ—Å–∞–µ—Ç –∫—É–±–∏–∫...",
                                               parse_mode=types.ParseMode.HTML)
    recipient_message_id = recipient_message.message_id

    user_data = await bot.send_dice(chat_id=callback_query.message.chat.id, emoji="üé≤",
                                    reply_to_message_id=callback_query.message.reply_to_message.message_id)
    dice_result_recipient = user_data['dice']['value']

    await asyncio.sleep(4)

    challenger_message = await bot.send_message(chat_id=callback_query.message.chat.id,
                                                text=f"{recipient.user.mention} –±—Ä–æ—Å–∞–µ—Ç –∫—É–±–∏–∫...")
    challenger_message_id = challenger_message.message_id

    user_data = await bot.send_dice(chat_id=callback_query.message.chat.id, emoji="üé≤")
    dice_result_challenger = user_data['dice']['value']

    await asyncio.sleep(4)

    if dice_result_challenger > dice_result_recipient:
        update_user_balance(challenger_id, -amount)
        update_user_balance(recipient_id, amount)
        winner_user = challenger.user
    elif dice_result_challenger < dice_result_recipient:
        update_user_balance(challenger_id, amount)
        update_user_balance(recipient_id, -amount)
        winner_user = recipient.user
    else:
        winner_user = None

    if winner_user:
        await callback_query.message.answer(f"{winner_user.first_name} –ø—Ä–æ–∏–≥—Ä–∞–ª!", parse_mode=types.ParseMode.HTML)
    else:
        await callback_query.message.answer("–ù–∏—á—å—è!")

    del us_lis[:]


@dp.callback_query_handler(lambda c: c.data.startswith('dice_challenge_decline'))
async def decline_dice_challenge_handler(callback_query: types.CallbackQuery):
    challenge_data = callback_query.data.split(":")
    user_id = int(challenge_data[1])
    recipient_id = int(challenge_data[2])

    if callback_query.from_user.id != recipient_id:
        await callback_query.answer("–ù–µ –≤–∞–º –≤—ã–∑–æ–≤!", show_alert=True)
        return

    await callback_query.message.delete()

    await callback_query.message.answer(f"{callback_query.from_user.first_name} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤—ã–∑–æ–≤")

    del us_lis[:]


@dp.message_handler(commands=['help'])
async def main_command_handler(message: aiogram.types.Message):
    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.add(types.InlineKeyboardButton("–ü–æ–º–æ—â—å", url="https://t.me/RudeusNG"))

    await message.answer("–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≥—Ä—É–ø–ø—ã\n–õ–∏–±–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É @RudeusNG",
                         reply_markup=inline_keyboard)


@dp.message_handler(commands=['game'])
async def main_command_handler(message: aiogram.types.Message):
    await message.answer(
        '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ª–∏—à—å –ö—É–±–∏–∫*\n–ß—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å *–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –ø—Ä–æ—Ç–∏–≤, –∫–æ—Ç—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å - –Ω–∞–ø–∏—à–∏—Ç–µ\n *–ö—É–±–∏–∫ –°–£–ú–ú–ê*')


@dp.message_handler(commands=['remove'])
async def main_command_handler(message: aiogram.types.Message):
    await message.answer('–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /start', reply_markup=ReplyKeyboardRemove())


@dp.message_handler(commands=['rules'])
async def main_command_handler(message: aiogram.types.Message):
    await message.answer(
        '–í—Å–µ–º, –ø—Ä–∏–≤–µ—Ç!\n–≠—Ç–æ The Sovereigns Circle Bot\n–ò–≥—Ä–æ–≤–æ–π –±–æ—Ç –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!!!!\n–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Å—Ç—ã!\n–í–µ—Å–µ–ª–∏—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∞—Ç—å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –æ—Ç –±–æ—Ç–∞)\n'
        '\n–í –±–æ—Ç–µ –µ—Å—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç –ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ –∫ —á–µ–º—É\n'
        '\n–ö–Ω–æ–ø–∫–∞ /kingdom, –Ω—É–∂–Ω–∞, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—ë –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ, —Å–æ–±–∏—Ä–∞—Ç—å –∫–∞–∑–Ω—É –∏ —É–ª—É—á—à–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏\n'
        '\n–ö–Ω–æ–ø–∫–∞ /farm, –¥–ª—è —Å–±–æ—Ä–∞ –¥–µ–Ω–µ–≥, —Å—É–º–º–∞ –¥–µ–Ω–µ–≥ –≤—ã–ø–∞–¥–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ)\n'
        '\n–ö–Ω–æ–ø–∫–∞ /balance, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –Ω–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã –±–æ–≥–∞—Ç—ã ;)\n'
        '\n–í –∫–Ω–æ–ø–∫–µ /game –º—ã –¥–æ–±–∞–≤–∏–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–≤–ª–µ–∫–∞–ª–æ–≤–∫–∏, —á—Ç–æ–±—ã —Å –≤–µ—Å–µ–ª—å–µ–º –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è)\n'

        '\n–í –∫–Ω–æ–ø–∫–µ –ü–æ–º–æ—â—å —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã)\n'
        '\n–ß—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏: (*–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–º—É, –∫–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –¥–µ–Ω–µ–≥ —Å —Ç–µ–∫—Å—Ç–æ–º - *–ü–µ—Ä–µ–¥–∞—Ç—å –°–£–ú–ú–ê**'
        '\n–í—Å–µ–º –ø—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã)\n'
        '\n–ï—Å–ª–∏ —É –∫–æ–≥–æ-—Ç–æ –µ—Å—Ç—å –∏–¥–µ–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞ - –ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –ø–µ—Ä–µ–π–¥—è –ø–æ –∫–Ω–æ–ø–∫–µ –ü–æ–º–æ—â—å\n'
        '–õ–∏–±–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É @RudeusNG')


@dp.message_handler(regexp=r'^–≤—ã–¥–∞—Ç—å (\d+)$')
async def give_command_handler(message: types.Message):
    user_id = message.from_user.id

    if user_id not in allowed_user_id or not message.reply_to_message:
        await message.answer()
        return

    try:
        amount = int(message.text.split()[1])
    except (ValueError, IndexError):
        await message.answer()
        return

    if amount <= 0:
        await message.answer()
        return

    recipient_id = message.reply_to_message.from_user.id
    update_user_balance(recipient_id, amount)
    await message.answer(f"–í—ã –≤—ã–¥–∞–ª–∏ {amount}TSC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")


@dp.message_handler(regexp=r'^—Å–Ω—è—Ç—å (\d+)$')
async def give_command_handler(message: types.Message):
    user_id = message.from_user.id

    if user_id not in allowed_user_id or not message.reply_to_message:
        await message.answer()
        return

    try:
        amount = int(message.text.split()[1])
    except (ValueError, IndexError):
        await message.answer()
        return

    if amount <= 0:
        await message.answer()
        return

    recipient_id = message.reply_to_message.from_user.id
    update_user_balance(recipient_id, -amount)
    await message.answer(f"–í—ã —Å–Ω—è–ª–∏ {amount}TSC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")


@dp.message_handler(commands=['farm'])
async def main_command_handler(message: aiogram.types.Message):
    user_id = message.from_user.id

    last_mine_command_time = get_last_mine_command_time(user_id)
    current_time = time.time()

    if current_time - last_mine_command_time < 60 * 60:
        time_left = timedelta(seconds=(60 * 60) - (current_time - last_mine_command_time))
        hours = time_left.seconds // 3600
        minutes = (time_left.seconds % 3600) // 60
        seconds = time_left.seconds % 60
        await message.reply(
            f"–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /farm —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 1 —á–∞—Å.\n –û—Å—Ç–∞–ª–æ—Å—å {minutes} –º–∏–Ω. {seconds} —Å–µ–∫.")
    else:
        new_balance = random.randint(50, 300)

        update_user_balance(user_id, new_balance)

        save_last_mine_command_time(user_id, current_time)

        await message.reply(f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {new_balance}TSC")


@dp.message_handler(commands=['balance'])
async def balance_command_handler(message: types.Message):
    user_id = message.from_user.id
    current_balance = get_user_balance(user_id)
    await message.reply(f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance}TSC.")


@dp.message_handler(regexp=r'^–ø–µ—Ä–µ–¥–∞—Ç—å (\d+)$')
async def transfer_command_handler(message: aiogram.types.Message):
    user_id = message.from_user.id
    amount = int(message.text.split()[1])

    reply_message = message.reply_to_message

    if not reply_message or reply_message.from_user.id == user_id:
        await message.reply()
        return

    recipient_id = reply_message.from_user.id

    if amount <= 0:
        await message.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
        return

    sender_balance = get_user_balance(user_id)
    if sender_balance < amount:
        await message.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
        return

    update_user_balance(user_id, -amount)
    update_user_balance(recipient_id, amount)

    await message.reply(f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ {amount}TSC.")


@dp.message_handler(commands=['top'])
async def top_command_handler(message: types.Message):
    user_id = message.from_user.id

    cursor.execute(
        "SELECT b.user_id, b.balance, t.name FROM balances AS b JOIN towns AS t ON b.user_id = t.user_id ORDER BY b.balance DESC LIMIT 12")
    top_users = cursor.fetchall()

    top_message = "–¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤:\n\n"
    for index, (user_id, balance, town_name) in enumerate(top_users, start=1):
        user = await bot.get_chat_member(message.chat.id, user_id)
        first_name = user.user.first_name
        if user_id in allowed_user_id:
            continue

        else:
            top_message += f"{index - 2}) –í–ª–∞–¥–µ–ª–µ—Ü: {first_name}\n –ì–æ—Ä–æ–¥: {town_name} \n {balance} TSC\n\n"

    await message.reply(top_message, parse_mode=types.ParseMode.HTML)


@dp.message_handler(commands=['create'])
async def create_command_handler(message: aiogram.types.Message):
    user_id = message.from_user.id
    if user_id == 5266482566 or user_id == 5707895629:
        await message.answer('–í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ!)')
    else:

        cursor.execute("SELECT name FROM towns WHERE user_id=?", (user_id,))
        result = cursor.fetchone()

        if result:
            await message.reply(
                "–í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.\n –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /kingdom, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–µ.")
            return

        await message.reply("–°–æ–∑–¥–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞.")

        dp.register_message_handler(process_city_name, lambda message: message.from_user.id == user_id)


async def process_city_name(message: aiogram.types.Message):
    user_id = message.from_user.id
    city_name = message.text

    cursor.execute("INSERT INTO towns (user_id, name) VALUES (?, ?)", (user_id, city_name))
    conn.commit()

    await message.reply(
        "–í–∞—à–µ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /kingdom —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–≤–æ—ë –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ, –∂–µ–ª–∞–µ–º —É–¥–∞—á–∏!")


@dp.message_handler(commands=['kingdom'])
async def town_command_handler(message: aiogram.types.Message):
    user_id = message.from_user.id

    cursor.execute(
        "SELECT name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income FROM towns WHERE user_id=?",
        (user_id,))
    result = cursor.fetchone()

    if not result:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.")
        return

    city_name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income = result

    army_level = army_level or 0
    health_level = health_level or 0
    courp_level = courp_level or 0
    road_level = road_level or 0
    dolar_level = dolar_level or 0
    food_level = food_level or 0
    build_level = build_level or 0

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    cursor.execute("SELECT income FROM user_income WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        income = result[0]
    else:
        income = 0

    text = f"üèØ–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {city_name}\n\nüõ°–ó–∞—â–∏—Ç–∞: {army_level}\nüíñ–ó–¥–æ—Ä–æ–≤—å–µ: {health_level}\n‚öñÔ∏è–ü–æ–ª–∏—Ç–∏–∫–∞: {courp_level}\n‚öîÔ∏è–í–æ–π—Å–∫–æ: {road_level}\nüè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {build_level}\nüìà–≠–∫–æ–Ω–æ–º–∏–∫–∞: {dolar_level}\nüåæ–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ: {food_level}\n\nüí∞–ë—é–¥–∂–µ—Ç –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞: {income}TSC\n\nüíéTSC –Ω–∞ —Å—á–µ—Ç—É: {current_balance}TSC"

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.row(types.InlineKeyboardButton("üõ° –ó–∞—â–∏—Ç–∞", callback_data="upgrade_army"),
                        types.InlineKeyboardButton("üíñ –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="upgrade_health"),
                        types.InlineKeyboardButton("‚öñÔ∏è –ü–æ–ª–∏—Ç–∏–∫–∞", callback_data="upgrade_courp"))
    inline_keyboard.row(types.InlineKeyboardButton("‚öîÔ∏è –í–æ–π—Å–∫–æ", callback_data="upgrade_road"),
                        types.InlineKeyboardButton("üè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", callback_data="upgrade_build"),
                        types.InlineKeyboardButton("üìà –≠–∫–æ–Ω–æ–º–∏–∫–∞", callback_data="upgrade_dolar"))
    inline_keyboard.row(types.InlineKeyboardButton("üåæ –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ", callback_data="upgrade_food"))
    inline_keyboard.row(types.InlineKeyboardButton(f"üí∞ –°–æ–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å {income}TSC", callback_data="income"))

    await message.answer(text, reply_markup=inline_keyboard)
    asyncio.create_task(update_income_task(user_id))


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'upgrade_road')
async def upgrade_road_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if user_id in last_command_executed:
        last_executed_time = last_command_executed[user_id]
        current_time = time.time()
        if current_time - last_executed_time < 1.5:
            await asyncio.sleep(1.5 - (current_time - last_executed_time))

    last_command_executed[user_id] = time.time()

    cursor.execute(
        "SELECT name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income FROM towns WHERE user_id=?",
        (user_id,))
    result = cursor.fetchone()
    if result:
        city_name = result[0]
        army_level = result[1]
        health_level = result[2]
        courp_level = result[3]
        road_level = result[4]
        dolar_level = result[5]
        food_level = result[6]
        build_level = result[7]
    else:
        await callback_query.message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.")
        return

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    if road_level is not None:
        new_road_level = road_level + 1
    else:
        new_road_level = 1

    upgrade_cost = 500 * (2 ** (new_road_level - 1))

    current_road_income_5s = 1 * (2 ** road_level) if road_level is not None else 0

    upgraded_road_income_5s = 1 * (2 ** new_road_level) if new_road_level is not None else 0

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.add(types.InlineKeyboardButton("–£–ª—É—á—à–∏—Ç—å", callback_data="upgrade_roads"))
    inline_keyboard.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_town'))

    text = f"üèØ–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {city_name}\n\n–ü–∞—Ä–∞–º–µ—Ç—Ä: ‚öîÔ∏è–í–æ–π—Å–∫–æ\n–£—Ä–æ–≤–µ–Ω—å: {road_level if road_level is not None else 0}\n\n–î–æ—Ö–æ–¥ –≤ —á–∞—Å: {current_road_income_5s}TSC\n–î–æ—Ö–æ–¥ –≤ —á–∞—Å –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è: {upgraded_road_income_5s}TSC\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è: {upgrade_cost}TSC\nüíéTSC –Ω–∞ —Å—á–µ—Ç—É: {current_balance}TSC"

    await callback_query.message.edit_text(text, reply_markup=inline_keyboard)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'upgrade_dolar')
async def upgrade_dolar_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if user_id in last_command_executed:
        last_executed_time = last_command_executed[user_id]
        current_time = time.time()
        if current_time - last_executed_time < 1.5:
            await asyncio.sleep(1.5 - (current_time - last_executed_time))

    last_command_executed[user_id] = time.time()

    cursor.execute(
        "SELECT name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income FROM towns WHERE user_id=?",
        (user_id,))
    result = cursor.fetchone()
    if result:
        city_name = result[0]
        army_level = result[1]
        health_level = result[2]
        courp_level = result[3]
        road_level = result[4]
        dolar_level = result[5]
        food_level = result[6]
        build_level = result[7]
    else:
        await callback_query.message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.")
        return

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    if dolar_level is not None:
        new_dolar_level = courp_level + 1
    else:
        new_dolar_level = 1

    upgrade_cost = 500 * (2 ** (new_dolar_level - 1))

    current_dolar_income_5s = 1 * (2 ** dolar_level) if dolar_level is not None else 0

    upgraded_dolar_income_5s = 1 * (2 ** new_dolar_level) if new_dolar_level is not None else 0

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.add(types.InlineKeyboardButton("–£–ª—É—á—à–∏—Ç—å", callback_data="upgrade_dolars"))
    inline_keyboard.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_town'))

    text = f"üèØ–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {city_name}\n\n–ü–∞—Ä–∞–º–µ—Ç—Ä: üìà–≠–∫–æ–Ω–æ–º–∏–∫–∞\n–£—Ä–æ–≤–µ–Ω—å: {dolar_level if dolar_level is not None else 0}\n\n–î–æ—Ö–æ–¥ –≤ —á–∞—Å: {current_dolar_income_5s}TSC\n–î–æ—Ö–æ–¥ –≤ —á–∞—Å –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è: {upgraded_dolar_income_5s}TSC\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è: {upgrade_cost}TSC\nüíéTSC –Ω–∞ —Å—á–µ—Ç—É: {current_balance}TSC"

    await callback_query.message.edit_text(text, reply_markup=inline_keyboard)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'upgrade_food')
async def upgrade_food_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if user_id in last_command_executed:
        last_executed_time = last_command_executed[user_id]
        current_time = time.time()
        if current_time - last_executed_time < 1.5:
            await asyncio.sleep(1.5 - (current_time - last_executed_time))

    last_command_executed[user_id] = time.time()

    cursor.execute(
        "SELECT name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income FROM towns WHERE user_id=?",
        (user_id,))
    result = cursor.fetchone()
    if result:
        city_name = result[0]
        army_level = result[1]
        health_level = result[2]
        courp_level = result[3]
        road_level = result[4]
        dolar_level = result[5]
        food_level = result[6]
        build_level = result[7]
    else:
        await callback_query.message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.")
        return

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    if food_level is not None:
        new_food_level = food_level + 1
    else:
        new_food_level = 1

    upgrade_cost = 500 * (2 ** (new_food_level - 1))

    current_food_income_5s = 1 * (2 ** food_level) if food_level is not None else 0

    upgraded_food_income_5s = 1 * (2 ** new_food_level) if new_food_level is not None else 0

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.add(types.InlineKeyboardButton("–£–ª—É—á—à–∏—Ç—å", callback_data="upgrade_foods"))
    inline_keyboard.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_town'))

    text = f"üèØ–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {city_name}\n\n–ü–∞—Ä–∞–º–µ—Ç—Ä: üåæ–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ\n–£—Ä–æ–≤–µ–Ω—å: {food_level if food_level is not None else 0}\n\n–î–æ—Ö–æ–¥ –≤ —á–∞—Å: {current_food_income_5s}TSC\n–î–æ—Ö–æ–¥ –≤ —á–∞—Å –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è: {upgraded_food_income_5s}TSC\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è: {upgrade_cost}TSC\nüíéTSC –Ω–∞ —Å—á–µ—Ç—É: {current_balance}TSC"

    await callback_query.message.edit_text(text, reply_markup=inline_keyboard)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'upgrade_build')
async def upgrade_build_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if user_id in last_command_executed:
        last_executed_time = last_command_executed[user_id]
        current_time = time.time()
        if current_time - last_executed_time < 1.5:
            await asyncio.sleep(1.5 - (current_time - last_executed_time))

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    last_command_executed[user_id] = time.time()

    cursor.execute(
        "SELECT name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income FROM towns WHERE user_id=?",
        (user_id,))
    result = cursor.fetchone()
    if result:
        city_name = result[0]
        army_level = result[1]
        health_level = result[2]
        courp_level = result[3]
        road_level = result[4]
        dolar_level = result[5]
        food_level = result[6]
        build_level = result[7]
    else:
        await callback_query.message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.")
        return

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    if build_level is not None:
        new_build_level = build_level + 1
    else:
        new_build_level = 1

    upgrade_cost = 500 * (2 ** (new_build_level - 1))

    current_build_income_5s = 1 * (2 ** build_level) if build_level is not None else 0

    upgraded_build_income_5s = 1 * (2 ** new_build_level) if new_build_level is not None else 0

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.add(types.InlineKeyboardButton("–£–ª—É—á—à–∏—Ç—å", callback_data="upgrade_builds"))
    inline_keyboard.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_town'))

    text = f"üèØ–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {city_name}\n\n–ü–∞—Ä–∞–º–µ—Ç—Ä: üè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞\n–£—Ä–æ–≤–µ–Ω—å: {build_level if build_level is not None else 0}\n\n–î–æ—Ö–æ–¥ –≤ —á–∞—Å: {current_build_income_5s}TSC\n–î–æ—Ö–æ–¥ –≤ —á–∞—Å –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è: {upgraded_build_income_5s}TSC\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è: {upgrade_cost}TSC\nüíéTSC –Ω–∞ —Å—á–µ—Ç—É: {current_balance}TSC"

    await callback_query.message.edit_text(text, reply_markup=inline_keyboard)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'upgrade_courp')
async def upgrade_courp_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if user_id in last_command_executed:
        last_executed_time = last_command_executed[user_id]
        current_time = time.time()
        if current_time - last_executed_time < 1.5:
            await asyncio.sleep(1.5 - (current_time - last_executed_time))

    last_command_executed[user_id] = time.time()

    cursor.execute(
        "SELECT name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income FROM towns WHERE user_id=?",
        (user_id,))
    result = cursor.fetchone()
    if result:
        city_name = result[0]
        army_level = result[1]
        health_level = result[2]
        courp_level = result[3]
        road_level = result[4]
        dolar_level = result[5]
        food_level = result[6]
        build_level = result[7]
    else:
        await callback_query.message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.")
        return

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    if courp_level is not None:
        new_courp_level = courp_level + 1
    else:
        new_courp_level = 1

    upgrade_cost = 500 * (2 ** (new_courp_level - 1))

    current_courp_income_5s = 1 * (2 ** courp_level) if courp_level is not None else 0

    upgraded_courp_income_5s = 1 * (2 ** new_courp_level) if new_courp_level is not None else 0

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.add(types.InlineKeyboardButton("–£–ª—É—á—à–∏—Ç—å", callback_data="upgrade_courps"))
    inline_keyboard.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_town'))

    text = f"üèØ–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {city_name}\n\n–ü–∞—Ä–∞–º–µ—Ç—Ä: ‚öñÔ∏è–ü–æ–ª–∏—Ç–∏–∫–∞\n–£—Ä–æ–≤–µ–Ω—å: {courp_level if courp_level is not None else 0}\n\n–î–æ—Ö–æ–¥ –≤ —á–∞—Å: {current_courp_income_5s}TSC\n–î–æ—Ö–æ–¥ –≤ —á–∞—Å –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è: {upgraded_courp_income_5s}TSC\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è: {upgrade_cost}TSC\nüíéTSC –Ω–∞ —Å—á–µ—Ç—É: {current_balance}TSC"

    await callback_query.message.edit_text(text, reply_markup=inline_keyboard)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'upgrade_army')
async def upgrade_army_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if user_id in last_command_executed:
        last_executed_time = last_command_executed[user_id]
        current_time = time.time()
        if current_time - last_executed_time < 1.5:
            await asyncio.sleep(1.5 - (current_time - last_executed_time))

    last_command_executed[user_id] = time.time()

    cursor.execute(
        "SELECT name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level FROM towns WHERE user_id=?",
        (user_id,))
    result = cursor.fetchone()

    if not result:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.")
        return

    city_name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level = result

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    cursor.execute("SELECT army_level FROM towns WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_army_level = result[0]
    else:
        current_army_level = 0

    if current_army_level is not None:
        new_army_level = current_army_level + 1
    else:
        new_army_level = 1

    upgrade_cost = 500 * (2 ** (new_army_level - 1))

    current_income_5s = 1 * (
            2 ** current_army_level) if current_army_level is not None else 0  # –¢–µ–∫—É—â–∏–π –¥–æ—Ö–æ–¥ –≤ 5 —Å–µ–∫—É–Ω–¥
    upgraded_income_5s = 1 * (
            2 ** new_army_level) if new_army_level is not None else 0  # –î–æ—Ö–æ–¥ –≤ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.add(types.InlineKeyboardButton("–£–ª—É—á—à–∏—Ç—å", callback_data="upgrade_confirm"))
    inline_keyboard.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_town'))

    text = f"üèØ–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {city_name}\n\n–ü–∞—Ä–∞–º–µ—Ç—Ä: üõ°–ó–∞—â–∏—Ç–∞\n–£—Ä–æ–≤–µ–Ω—å: {army_level if army_level is not None else 0}\n\n–î–æ—Ö–æ–¥ –≤ —á–∞—Å: {current_income_5s}TSC\n–î–æ—Ö–æ–¥ –≤ —á–∞—Å –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è: {upgraded_income_5s}$\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è: {upgrade_cost}TSC\nüíéTSC –Ω–∞ —Å—á–µ—Ç—É: {current_balance}TSC"

    await callback_query.message.edit_text(text, reply_markup=inline_keyboard)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'upgrade_health')
async def upgrade_health_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if user_id in last_command_executed:
        last_executed_time = last_command_executed[user_id]
        current_time = time.time()
        if current_time - last_executed_time < 1.5:
            await asyncio.sleep(1.5 - (current_time - last_executed_time))

    last_command_executed[user_id] = time.time()

    cursor.execute(
        "SELECT name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income FROM towns WHERE user_id=?",
        (user_id,))
    result = cursor.fetchone()
    if result:
        city_name = result[0]
        army_level = result[1]
        health_level = result[2]
        courp_level = result[3]
        road_level = result[4]
        dolar_level = result[5]
        food_level = result[6]
        build_level = result[7]
    else:
        await callback_query.message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.")
        return

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    if health_level is not None:
        new_health_level = health_level + 1
    else:
        new_health_level = 1

    upgrade_cost = 500 * (2 ** (new_health_level - 1))

    current_health_income_5s = 1 * (2 ** health_level) if health_level is not None else 0

    upgraded_health_income_5s = 1 * (2 ** new_health_level) if new_health_level is not None else 0

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.add(types.InlineKeyboardButton("–£–ª—É—á—à–∏—Ç—å", callback_data="upgrade_healths"))
    inline_keyboard.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_town'))

    text = f"üèØ–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {city_name}\n\n–ü–∞—Ä–∞–º–µ—Ç—Ä: üíñ–ó–¥–æ—Ä–æ–≤—å–µ\n–£—Ä–æ–≤–µ–Ω—å: {health_level if health_level is not None else 0}\n\n–î–æ—Ö–æ–¥ –≤ —á–∞—Å: {current_health_income_5s}TSC\n–î–æ—Ö–æ–¥ –≤ —á–∞—Å –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è: {upgraded_health_income_5s}TSC\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è: {upgrade_cost}TSC\nüíéTSC –Ω–∞ —Å—á–µ—Ç—É: {current_balance}TSC"

    await callback_query.message.edit_text(text, reply_markup=inline_keyboard)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'income')
async def income_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if user_id in last_command_executed:
        last_executed_time = last_command_executed[user_id]
        current_time = time.time()
        if current_time - last_executed_time < 1.5:
            await asyncio.sleep(1.5 - (current_time - last_executed_time))

    last_command_executed[user_id] = time.time()

    cursor.execute("SELECT income FROM user_income WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        income = result[0]
    else:
        income = 0

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    new_balance = current_balance + income

    cursor.execute("UPDATE balances SET balance=? WHERE user_id=?", (new_balance, user_id))
    conn.commit()

    cursor.execute("INSERT OR REPLACE INTO user_income (user_id, income) VALUES (?, ?)", (user_id, 0))
    conn.commit()

    await callback_query.answer(f"–í—ã —Å–æ–±—Ä–∞–ª–∏ –¥–æ—Ö–æ–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ {income}TSC.", show_alert=True)

    cursor.execute(
        "SELECT name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level FROM towns WHERE user_id=?",
        (user_id,))
    result = cursor.fetchone()

    if user_id in last_command_executed:
        last_executed_time = last_command_executed[user_id]
        current_time = time.time()
        if current_time - last_executed_time < 1.5:
            await asyncio.sleep(1.5 - (current_time - last_executed_time))

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    last_command_executed[user_id] = time.time()

    if not result:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.")
        return

    city_name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level = result

    army_level = army_level or 0
    health_level = health_level or 0
    courp_level = courp_level or 0
    road_level = road_level or 0
    dolar_level = dolar_level or 0
    food_level = food_level or 0
    build_level = build_level or 0

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    cursor.execute("SELECT income FROM user_income WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        income = result[0]
    else:
        income = 0

    text = f"üèØ–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {city_name}\n\nüõ°–ó–∞—â–∏—Ç–∞: {army_level}\nüíñ–ó–¥–æ—Ä–æ–≤—å–µ: {health_level}\n‚öñÔ∏è–ü–æ–ª–∏—Ç–∏–∫–∞: {courp_level}\n‚öîÔ∏è–í–æ–π—Å–∫–æ: {road_level}\nüè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {build_level}\nüìà–≠–∫–æ–Ω–æ–º–∏–∫–∞: {dolar_level}\nüåæ–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ: {food_level}\n\nüí∞–ë—é–¥–∂–µ—Ç –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞: {income}‚Ç¨\n\nüíéTSC –Ω–∞ —Å—á–µ—Ç—É: {current_balance}TSC"

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.row(types.InlineKeyboardButton("üõ° –ó–∞—â–∏—Ç–∞", callback_data="upgrade_army"),
                        types.InlineKeyboardButton("üíñ –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="upgrade_health"),
                        types.InlineKeyboardButton("‚öñÔ∏è –ü–æ–ª–∏—Ç–∏–∫–∞", callback_data="upgrade_courp"))
    inline_keyboard.row(types.InlineKeyboardButton("‚öîÔ∏è –í–æ–π—Å–∫–æ", callback_data="upgrade_road"),
                        types.InlineKeyboardButton("üè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", callback_data="upgrade_build"),
                        types.InlineKeyboardButton("üìà –≠–∫–æ–Ω–æ–º–∏–∫–∞", callback_data="upgrade_dolar"))
    inline_keyboard.row(types.InlineKeyboardButton("üåæ –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ", callback_data="upgrade_food"))
    inline_keyboard.row(types.InlineKeyboardButton(f"üí∞ –°–æ–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å {income}TSC", callback_data="income"))

    await callback_query.message.edit_text(text, reply_markup=inline_keyboard)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'upgrade_roads')
async def upgrade_road_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    global current_road_level

    if user_id in last_command_executed:
        last_executed_time = last_command_executed[user_id]
        current_time = time.time()
        if current_time - last_executed_time < 1.5:
            await asyncio.sleep(1.5 - (current_time - last_executed_time))

    last_command_executed[user_id] = time.time()

    cursor.execute("SELECT road_level FROM towns WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_level = result[0]
    else:
        current_level = 0

    if current_level is not None:
        new_level = current_level + 1
    else:
        new_level = 1

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        balance = result[0]
    else:
        balance = 0

    upgrade_cost = 500 * (2 ** (new_level - 1))

    if balance >= upgrade_cost:
        if new_level <= 10000:
            cursor.execute("UPDATE towns SET road_level=? WHERE user_id=?", (new_level, user_id))
            conn.commit()

            new_balance = balance - upgrade_cost
            cursor.execute("UPDATE balances SET balance=? WHERE user_id=?", (new_balance, user_id))
            conn.commit()

            await callback_query.answer("–£—Ä–æ–≤–µ–Ω—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —É–ª—É—á—à–µ–Ω.", show_alert=True)

            current_road_level = new_level
            asyncio.create_task(perform_update_income(user_id))
        else:
            await callback_query.message.edit_text("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∑–¥–æ—Ä–æ–≤—å—è.")
    else:
        await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.", show_alert=True)

    cursor.execute(
        "SELECT name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income FROM towns WHERE user_id=?",
        (user_id,))
    result = cursor.fetchone()

    if not result:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.")
        return

    city_name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income = result

    army_level = army_level or 0
    health_level = health_level or 0
    courp_level = courp_level or 0
    road_level = road_level or 0
    dolar_level = dolar_level or 0
    food_level = food_level or 0
    build_level = build_level or 0

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    cursor.execute("SELECT income FROM user_income WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        income = result[0]
    else:
        income = 0

    text = f"üèØ–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {city_name}\n\nüõ°–ó–∞—â–∏—Ç–∞: {army_level}\nüíñ–ó–¥–æ—Ä–æ–≤—å–µ: {health_level}\n‚öñÔ∏è–ü–æ–ª–∏—Ç–∏–∫–∞: {courp_level}\n‚öîÔ∏è–í–æ–π—Å–∫–æ: {road_level}\nüè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {build_level}\nüìà–≠–∫–æ–Ω–æ–º–∏–∫–∞: {dolar_level}\nüåæ–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ: {food_level}\n\nüí∞–ë—é–¥–∂–µ—Ç –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞: {income}TSC\n\nüíéTSC –Ω–∞ —Å—á–µ—Ç—É: {current_balance}TSC"

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.row(types.InlineKeyboardButton("üõ° –ó–∞—â–∏—Ç–∞", callback_data="upgrade_army"),
                        types.InlineKeyboardButton("üíñ –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="upgrade_health"),
                        types.InlineKeyboardButton("‚öñÔ∏è –ü–æ–ª–∏—Ç–∏–∫–∞", callback_data="upgrade_courp"))
    inline_keyboard.row(types.InlineKeyboardButton("‚öîÔ∏è –í–æ–π—Å–∫–æ", callback_data="upgrade_road"),
                        types.InlineKeyboardButton("üè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", callback_data="upgrade_build"),
                        types.InlineKeyboardButton("üìà –≠–∫–æ–Ω–æ–º–∏–∫–∞", callback_data="upgrade_dolar"))
    inline_keyboard.row(types.InlineKeyboardButton("üåæ –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ", callback_data="upgrade_food"))
    inline_keyboard.row(types.InlineKeyboardButton(f"üí∞ –°–æ–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å {income}TSC", callback_data="income"))

    await callback_query.message.edit_text(text, reply_markup=inline_keyboard)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'upgrade_dolars')
async def upgrade_dolar_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    global current_dolar_level

    if user_id in last_command_executed:
        last_executed_time = last_command_executed[user_id]
        current_time = time.time()
        if current_time - last_executed_time < 1.5:
            await asyncio.sleep(1.5 - (current_time - last_executed_time))

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    last_command_executed[user_id] = time.time()

    cursor.execute("SELECT dolar_level FROM towns WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_level = result[0]
    else:
        current_level = 0

    if current_level is not None:
        new_level = current_level + 1
    else:
        new_level = 1

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        balance = result[0]
    else:
        balance = 0

    upgrade_cost = 500 * (2 ** (new_level - 1))

    if balance >= upgrade_cost:
        if new_level <= 10000:
            cursor.execute("UPDATE towns SET dolar_level=? WHERE user_id=?", (new_level, user_id))
            conn.commit()

            new_balance = balance - upgrade_cost
            cursor.execute("UPDATE balances SET balance=? WHERE user_id=?", (new_balance, user_id))
            conn.commit()

            await callback_query.answer("–£—Ä–æ–≤–µ–Ω—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —É–ª—É—á—à–µ–Ω.", show_alert=True)

            current_dolar_level = new_level
            asyncio.create_task(perform_update_income(user_id))
        else:
            await callback_query.message.edit_text("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∑–¥–æ—Ä–æ–≤—å—è.")
    else:
        await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.", show_alert=True)

    cursor.execute(
        "SELECT name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income FROM towns WHERE user_id=?",
        (user_id,))
    result = cursor.fetchone()

    if not result:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.")
        return

    city_name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income = result

    army_level = army_level or 0
    health_level = health_level or 0
    courp_level = courp_level or 0
    road_level = road_level or 0
    dolar_level = dolar_level or 0
    food_level = food_level or 0
    build_level = build_level or 0

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    cursor.execute("SELECT income FROM user_income WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        income = result[0]
    else:
        income = 0

    text = f"üèØ–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {city_name}\n\nüõ°–ó–∞—â–∏—Ç–∞: {army_level}\nüíñ–ó–¥–æ—Ä–æ–≤—å–µ: {health_level}\n‚öñÔ∏è–ü–æ–ª–∏—Ç–∏–∫–∞: {courp_level}\n‚öîÔ∏è–í–æ–π—Å–∫–æ: {road_level}\nüè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {build_level}\nüìà–≠–∫–æ–Ω–æ–º–∏–∫–∞: {dolar_level}\nüåæ–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ: {food_level}\n\nüí∞–ë—é–¥–∂–µ—Ç –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞: {income}TSC\n\nüíéTSC –Ω–∞ —Å—á–µ—Ç—É: {current_balance}TSC"

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.row(types.InlineKeyboardButton("üõ° –ó–∞—â–∏—Ç–∞", callback_data="upgrade_army"),
                        types.InlineKeyboardButton("üíñ –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="upgrade_health"),
                        types.InlineKeyboardButton("‚öñÔ∏è –ü–æ–ª–∏—Ç–∏–∫–∞", callback_data="upgrade_courp"))
    inline_keyboard.row(types.InlineKeyboardButton("‚öîÔ∏è –í–æ–π—Å–∫–æ", callback_data="upgrade_road"),
                        types.InlineKeyboardButton("üè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", callback_data="upgrade_build"),
                        types.InlineKeyboardButton("üìà –≠–∫–æ–Ω–æ–º–∏–∫–∞", callback_data="upgrade_dolar"))
    inline_keyboard.row(types.InlineKeyboardButton("üåæ –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ", callback_data="upgrade_food"))
    inline_keyboard.row(types.InlineKeyboardButton(f"üí∞ –°–æ–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å {income}TSC", callback_data="income"))

    await callback_query.message.edit_text(text, reply_markup=inline_keyboard)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'upgrade_foods')
async def upgrade_food_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    global current_food_level

    if user_id in last_command_executed:
        last_executed_time = last_command_executed[user_id]
        current_time = time.time()
        if current_time - last_executed_time < 1.5:
            await asyncio.sleep(1.5 - (current_time - last_executed_time))

    last_command_executed[user_id] = time.time()

    cursor.execute("SELECT food_level FROM towns WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_level = result[0]
    else:
        current_level = 0

    if current_level is not None:
        new_level = current_level + 1
    else:
        new_level = 1

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        balance = result[0]
    else:
        balance = 0

    upgrade_cost = 500 * (2 ** (new_level - 1))

    if balance >= upgrade_cost:
        if new_level <= 10000:
            cursor.execute("UPDATE towns SET food_level=? WHERE user_id=?", (new_level, user_id))
            conn.commit()

            new_balance = balance - upgrade_cost
            cursor.execute("UPDATE balances SET balance=? WHERE user_id=?", (new_balance, user_id))
            conn.commit()

            await callback_query.answer("–£—Ä–æ–≤–µ–Ω—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —É–ª—É—á—à–µ–Ω.", show_alert=True)

            current_food_level = new_level
            asyncio.create_task(perform_update_income(user_id))
        else:
            await callback_query.message.edit_text("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∑–¥–æ—Ä–æ–≤—å—è.")
    else:
        await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.", show_alert=True)

    cursor.execute(
        "SELECT name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income FROM towns WHERE user_id=?",
        (user_id,))
    result = cursor.fetchone()

    if not result:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.")
        return

    city_name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income = result

    army_level = army_level or 0
    health_level = health_level or 0
    courp_level = courp_level or 0
    road_level = road_level or 0
    dolar_level = dolar_level or 0
    food_level = food_level or 0
    build_level = build_level or 0

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    cursor.execute("SELECT income FROM user_income WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        income = result[0]
    else:
        income = 0

    text = f"üèØ–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {city_name}\n\nüõ°–ó–∞—â–∏—Ç–∞: {army_level}\nüíñ–ó–¥–æ—Ä–æ–≤—å–µ: {health_level}\n‚öñÔ∏è–ü–æ–ª–∏—Ç–∏–∫–∞: {courp_level}\n‚öîÔ∏è–í–æ–π—Å–∫–æ: {road_level}\nüè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {build_level}\nüìà–≠–∫–æ–Ω–æ–º–∏–∫–∞: {dolar_level}\nüåæ–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ: {food_level}\n\nüí∞–ë—é–¥–∂–µ—Ç –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞: {income}TSC\n\nüíéTSC –Ω–∞ —Å—á–µ—Ç—É: {current_balance}TSC"

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.row(types.InlineKeyboardButton("üõ° –ó–∞—â–∏—Ç–∞", callback_data="upgrade_army"),
                        types.InlineKeyboardButton("üíñ –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="upgrade_health"),
                        types.InlineKeyboardButton("‚öñÔ∏è –ü–æ–ª–∏—Ç–∏–∫–∞", callback_data="upgrade_courp"))
    inline_keyboard.row(types.InlineKeyboardButton("‚öîÔ∏è –í–æ–π—Å–∫–æ", callback_data="upgrade_road"),
                        types.InlineKeyboardButton("üè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", callback_data="upgrade_build"),
                        types.InlineKeyboardButton("üìà –≠–∫–æ–Ω–æ–º–∏–∫–∞", callback_data="upgrade_dolar"))
    inline_keyboard.row(types.InlineKeyboardButton("üåæ –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ", callback_data="upgrade_food"))
    inline_keyboard.row(types.InlineKeyboardButton(f"üí∞ –°–æ–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å {income}TSC", callback_data="income"))

    await callback_query.message.edit_text(text, reply_markup=inline_keyboard)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'upgrade_builds')
async def upgrade_build_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    global current_build_level

    if user_id in last_command_executed:
        last_executed_time = last_command_executed[user_id]
        current_time = time.time()
        if current_time - last_executed_time < 1.5:
            await asyncio.sleep(1.5 - (current_time - last_executed_time))

    last_command_executed[user_id] = time.time()

    cursor.execute("SELECT build_level FROM towns WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_level = result[0]
    else:
        current_level = 0

    if current_level is not None:
        new_level = current_level + 1
    else:
        new_level = 1

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        balance = result[0]
    else:
        balance = 0

    upgrade_cost = 500 * (2 ** (new_level - 1))

    if balance >= upgrade_cost:
        if new_level <= 10000:
            cursor.execute("UPDATE towns SET build_level=? WHERE user_id=?", (new_level, user_id))
            conn.commit()

            new_balance = balance - upgrade_cost
            cursor.execute("UPDATE balances SET balance=? WHERE user_id=?", (new_balance, user_id))
            conn.commit()

            await callback_query.answer("–£—Ä–æ–≤–µ–Ω—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —É–ª—É—á—à–µ–Ω.", show_alert=True)

            current_build_level = new_level
            asyncio.create_task(perform_update_income(user_id))
        else:
            await callback_query.message.edit_text("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∑–¥–æ—Ä–æ–≤—å—è.")
    else:
        await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.", show_alert=True)

    cursor.execute(
        "SELECT name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income FROM towns WHERE user_id=?",
        (user_id,))
    result = cursor.fetchone()

    if not result:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.")
        return

    city_name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income = result

    army_level = army_level or 0
    health_level = health_level or 0
    courp_level = courp_level or 0
    road_level = road_level or 0
    dolar_level = dolar_level or 0
    food_level = food_level or 0
    build_level = build_level or 0

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    cursor.execute("SELECT income FROM user_income WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        income = result[0]
    else:
        income = 0

    text = f"üèØ–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {city_name}\n\nüõ°–ó–∞—â–∏—Ç–∞: {army_level}\nüíñ–ó–¥–æ—Ä–æ–≤—å–µ: {health_level}\n‚öñÔ∏è–ü–æ–ª–∏—Ç–∏–∫–∞: {courp_level}\n‚öîÔ∏è–í–æ–π—Å–∫–æ: {road_level}\nüè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {build_level}\nüìà–≠–∫–æ–Ω–æ–º–∏–∫–∞: {dolar_level}\nüåæ–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ: {food_level}\n\nüí∞–ë—é–¥–∂–µ—Ç –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞: {income}TSC\n\nüíéTSC –Ω–∞ —Å—á–µ—Ç—É: {current_balance}TSC"

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.row(types.InlineKeyboardButton("üõ° –ó–∞—â–∏—Ç–∞", callback_data="upgrade_army"),
                        types.InlineKeyboardButton("üíñ –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="upgrade_health"),
                        types.InlineKeyboardButton("‚öñÔ∏è –ü–æ–ª–∏—Ç–∏–∫–∞", callback_data="upgrade_courp"))
    inline_keyboard.row(types.InlineKeyboardButton("‚öîÔ∏è –í–æ–π—Å–∫–æ", callback_data="upgrade_road"),
                        types.InlineKeyboardButton("üè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", callback_data="upgrade_build"),
                        types.InlineKeyboardButton("üìà –≠–∫–æ–Ω–æ–º–∏–∫–∞", callback_data="upgrade_dolar"))
    inline_keyboard.row(types.InlineKeyboardButton("üåæ –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ", callback_data="upgrade_food"))
    inline_keyboard.row(types.InlineKeyboardButton(f"üí∞ –°–æ–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å {income}TSC", callback_data="income"))

    await callback_query.message.edit_text(text, reply_markup=inline_keyboard)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'upgrade_courps')
async def upgrade_courp_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    global current_courp_level

    if user_id in last_command_executed:
        last_executed_time = last_command_executed[user_id]
        current_time = time.time()
        if current_time - last_executed_time < 1.5:
            await asyncio.sleep(1.5 - (current_time - last_executed_time))

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    last_command_executed[user_id] = time.time()

    cursor.execute("SELECT courp_level FROM towns WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_level = result[0]
    else:
        current_level = 0

    if current_level is not None:
        new_level = current_level + 1
    else:
        new_level = 1

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        balance = result[0]
    else:
        balance = 0

    upgrade_cost = 500 * (2 ** (new_level - 1))

    if balance >= upgrade_cost:
        if new_level <= 10000:
            cursor.execute("UPDATE towns SET courp_level=? WHERE user_id=?", (new_level, user_id))
            conn.commit()

            new_balance = balance - upgrade_cost
            cursor.execute("UPDATE balances SET balance=? WHERE user_id=?", (new_balance, user_id))
            conn.commit()

            await callback_query.answer("–£—Ä–æ–≤–µ–Ω—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —É–ª—É—á—à–µ–Ω.", show_alert=True)

            current_courp_level = new_level
            asyncio.create_task(perform_update_income(user_id))
        else:
            await callback_query.message.edit_text("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∑–¥–æ—Ä–æ–≤—å—è.")
    else:
        await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.", show_alert=True)

    cursor.execute(
        "SELECT name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income FROM towns WHERE user_id=?",
        (user_id,))
    result = cursor.fetchone()

    if not result:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.")
        return

    city_name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income = result

    army_level = army_level or 0
    health_level = health_level or 0
    courp_level = courp_level or 0
    road_level = road_level or 0
    dolar_level = dolar_level or 0
    food_level = food_level or 0
    build_level = build_level or 0

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    cursor.execute("SELECT income FROM user_income WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        income = result[0]
    else:
        income = 0

    text = f"üèØ–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {city_name}\n\nüõ°–ó–∞—â–∏—Ç–∞: {army_level}\nüíñ–ó–¥–æ—Ä–æ–≤—å–µ: {health_level}\n‚öñÔ∏è–ü–æ–ª–∏—Ç–∏–∫–∞: {courp_level}\n‚öîÔ∏è–í–æ–π—Å–∫–æ: {road_level}\nüè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {build_level}\nüìà–≠–∫–æ–Ω–æ–º–∏–∫–∞: {dolar_level}\nüåæ–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ: {food_level}\n\nüí∞–ë—é–¥–∂–µ—Ç –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞: {income}TSC\n\nüíéTSC –Ω–∞ —Å—á–µ—Ç—É: {current_balance}TSC"

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.row(types.InlineKeyboardButton("üõ° –ó–∞—â–∏—Ç–∞", callback_data="upgrade_army"),
                        types.InlineKeyboardButton("üíñ –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="upgrade_health"),
                        types.InlineKeyboardButton("‚öñÔ∏è –ü–æ–ª–∏—Ç–∏–∫–∞", callback_data="upgrade_courp"))
    inline_keyboard.row(types.InlineKeyboardButton("‚öîÔ∏è –í–æ–π—Å–∫–æ", callback_data="upgrade_road"),
                        types.InlineKeyboardButton("üè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", callback_data="upgrade_build"),
                        types.InlineKeyboardButton("üìà –≠–∫–æ–Ω–æ–º–∏–∫–∞", callback_data="upgrade_dolar"))
    inline_keyboard.row(types.InlineKeyboardButton("üåæ –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ", callback_data="upgrade_food"))
    inline_keyboard.row(types.InlineKeyboardButton(f"üí∞ –°–æ–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å {income}TSC", callback_data="income"))

    await callback_query.message.edit_text(text, reply_markup=inline_keyboard)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'upgrade_healths')
async def upgrade_health_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    global current_health_level

    if user_id in last_command_executed:
        last_executed_time = last_command_executed[user_id]
        current_time = time.time()
        if current_time - last_executed_time < 1.5:
            await asyncio.sleep(1.5 - (current_time - last_executed_time))

    last_command_executed[user_id] = time.time()

    cursor.execute("SELECT health_level FROM towns WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_level = result[0]
    else:
        current_level = 0

    if current_level is not None:
        new_level = current_level + 1
    else:
        new_level = 1

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        balance = result[0]
    else:
        balance = 0

    upgrade_cost = 500 * (2 ** (new_level - 1))

    if balance >= upgrade_cost:
        if new_level <= 10000:
            cursor.execute("UPDATE towns SET health_level=? WHERE user_id=?", (new_level, user_id))
            conn.commit()

            new_balance = balance - upgrade_cost
            cursor.execute("UPDATE balances SET balance=? WHERE user_id=?", (new_balance, user_id))
            conn.commit()

            await callback_query.answer("–£—Ä–æ–≤–µ–Ω—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —É–ª—É—á—à–µ–Ω.", show_alert=True)

            current_health_level = new_level
            asyncio.create_task(perform_update_income(user_id))
        else:
            await callback_query.message.edit_text("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∑–¥–æ—Ä–æ–≤—å—è.")
    else:
        await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.", show_alert=True)

    cursor.execute(
        "SELECT name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income FROM towns WHERE user_id=?",
        (user_id,))
    result = cursor.fetchone()

    if not result:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.")
        return

    city_name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income = result

    army_level = army_level or 0
    health_level = health_level or 0
    courp_level = courp_level or 0
    road_level = road_level or 0
    dolar_level = dolar_level or 0
    food_level = food_level or 0
    build_level = build_level or 0

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    cursor.execute("SELECT income FROM user_income WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        income = result[0]
    else:
        income = 0

    text = f"üèØ–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {city_name}\n\nüõ°–ó–∞—â–∏—Ç–∞: {army_level}\nüíñ–ó–¥–æ—Ä–æ–≤—å–µ: {health_level}\n‚öñÔ∏è–ü–æ–ª–∏—Ç–∏–∫–∞: {courp_level}\n‚öîÔ∏è–í–æ–π—Å–∫–æ: {road_level}\nüè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {build_level}\nüìà–≠–∫–æ–Ω–æ–º–∏–∫–∞: {dolar_level}\nüåæ–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ: {food_level}\n\nüí∞–ë—é–¥–∂–µ—Ç –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞: {income}TSC\n\nüíéTSC –Ω–∞ —Å—á–µ—Ç—É: {current_balance}TSC"

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.row(types.InlineKeyboardButton("üõ° –ó–∞—â–∏—Ç–∞", callback_data="upgrade_army"),
                        types.InlineKeyboardButton("üíñ –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="upgrade_health"),
                        types.InlineKeyboardButton("‚öñÔ∏è –ü–æ–ª–∏—Ç–∏–∫–∞", callback_data="upgrade_courp"))
    inline_keyboard.row(types.InlineKeyboardButton("‚öîÔ∏è –í–æ–π—Å–∫–æ", callback_data="upgrade_road"),
                        types.InlineKeyboardButton("üè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", callback_data="upgrade_build"),
                        types.InlineKeyboardButton("üìà –≠–∫–æ–Ω–æ–º–∏–∫–∞", callback_data="upgrade_dolar"))
    inline_keyboard.row(types.InlineKeyboardButton("üåæ –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ", callback_data="upgrade_food"))
    inline_keyboard.row(types.InlineKeyboardButton(f"üí∞ –°–æ–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å {income}TSC", callback_data="income"))

    await callback_query.message.edit_text(text, reply_markup=inline_keyboard)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'upgrade_confirm')
async def upgrade_army_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    global current_army_level

    if user_id in last_command_executed:
        last_executed_time = last_command_executed[user_id]
        current_time = time.time()
        if current_time - last_executed_time < 1.5:
            await asyncio.sleep(1.5 - (current_time - last_executed_time))

    last_command_executed[user_id] = time.time()

    cursor.execute("SELECT army_level FROM towns WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_level = result[0]
    else:
        current_level = 0

    if current_level is not None:
        new_level = current_level + 1
    else:
        new_level = 1

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        balance = result[0]
    else:
        balance = 0

    upgrade_cost = 500 * (2 ** (new_level - 1))

    if balance >= upgrade_cost:
        if new_level <= 10000:
            cursor.execute("UPDATE towns SET army_level=? WHERE user_id=?", (new_level, user_id))
            conn.commit()

            new_balance = balance - upgrade_cost
            cursor.execute("UPDATE balances SET balance=? WHERE user_id=?", (new_balance, user_id))
            conn.commit()

            await callback_query.answer("–£—Ä–æ–≤–µ–Ω—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —É–ª—É—á—à–µ–Ω.", show_alert=True)

            current_army_level = new_level
            asyncio.create_task(perform_update_income(user_id))
        else:
            await callback_query.message.edit_text("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∞—Ä–º–∏–∏.")
    else:
        await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.", show_alert=True)

    cursor.execute(
        "SELECT name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income FROM towns WHERE user_id=?",
        (user_id,))
    result = cursor.fetchone()

    if not result:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.")
        return

    city_name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income = result

    army_level = army_level or 0
    health_level = health_level or 0
    courp_level = courp_level or 0
    road_level = road_level or 0
    dolar_level = dolar_level or 0
    food_level = food_level or 0
    build_level = build_level or 0

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    cursor.execute("SELECT income FROM user_income WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        income = result[0]
    else:
        income = 0

    text = f"üèØ–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {city_name}\n\nüõ°–ó–∞—â–∏—Ç–∞: {army_level}\nüíñ–ó–¥–æ—Ä–æ–≤—å–µ: {health_level}\n‚öñÔ∏è–ü–æ–ª–∏—Ç–∏–∫–∞: {courp_level}\n‚öîÔ∏è–í–æ–π—Å–∫–æ: {road_level}\nüè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {build_level}\nüìà–≠–∫–æ–Ω–æ–º–∏–∫–∞: {dolar_level}\nüåæ–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ: {food_level}\n\nüí∞–ë—é–¥–∂–µ—Ç –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞: {income}TSC\n\nüíéTSC –Ω–∞ —Å—á–µ—Ç—É: {current_balance}TSC"

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.row(types.InlineKeyboardButton("üõ° –ó–∞—â–∏—Ç–∞", callback_data="upgrade_army"),
                        types.InlineKeyboardButton("üíñ –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="upgrade_health"),
                        types.InlineKeyboardButton("‚öñÔ∏è –ü–æ–ª–∏—Ç–∏–∫–∞", callback_data="upgrade_courp"))
    inline_keyboard.row(types.InlineKeyboardButton("‚öîÔ∏è –í–æ–π—Å–∫–æ", callback_data="upgrade_road"),
                        types.InlineKeyboardButton("üè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", callback_data="upgrade_build"),
                        types.InlineKeyboardButton("üìà –≠–∫–æ–Ω–æ–º–∏–∫–∞", callback_data="upgrade_dolar"))
    inline_keyboard.row(types.InlineKeyboardButton("üåæ –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ", callback_data="upgrade_food"))
    inline_keyboard.row(types.InlineKeyboardButton(f"üí∞ –°–æ–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å {income}TSC", callback_data="income"))

    await callback_query.message.edit_text(text, reply_markup=inline_keyboard)


@dp.callback_query_handler(lambda c: c.data == 'back_town')
async def back_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    cursor.execute(
        "SELECT name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level FROM towns WHERE user_id=?",
        (user_id,))
    result = cursor.fetchone()

    if user_id in last_command_executed:
        last_executed_time = last_command_executed[user_id]
        current_time = time.time()
        if current_time - last_executed_time < 1.5:
            await asyncio.sleep(1.5 - (current_time - last_executed_time))

    last_command_executed[user_id] = time.time()

    if not result:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.")
        return

    city_name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level = result

    army_level = army_level or 0
    health_level = health_level or 0
    courp_level = courp_level or 0
    road_level = road_level or 0
    dolar_level = dolar_level or 0
    food_level = food_level or 0
    build_level = build_level or 0

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    cursor.execute("SELECT income FROM user_income WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        income = result[0]
    else:
        income = 0

    text = f"üèØ–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {city_name}\n\nüõ°–ó–∞—â–∏—Ç–∞: {army_level}\nüíñ–ó–¥–æ—Ä–æ–≤—å–µ: {health_level}\n‚öñÔ∏è–ü–æ–ª–∏—Ç–∏–∫–∞: {courp_level}\n‚öîÔ∏è–í–æ–π—Å–∫–æ: {road_level}\nüè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {build_level}\nüìà–≠–∫–æ–Ω–æ–º–∏–∫–∞: {dolar_level}\nüåæ–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ: {food_level}\n\nüí∞–ë—é–¥–∂–µ—Ç –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞: {income}TSC\n\nüíéTSC –Ω–∞ —Å—á–µ—Ç—É: {current_balance}TSC"

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.row(types.InlineKeyboardButton("üõ° –ó–∞—â–∏—Ç–∞", callback_data="upgrade_army"),
                        types.InlineKeyboardButton("üíñ –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="upgrade_health"),
                        types.InlineKeyboardButton("‚öñÔ∏è –ü–æ–ª–∏—Ç–∏–∫–∞", callback_data="upgrade_courp"))
    inline_keyboard.row(types.InlineKeyboardButton("‚öîÔ∏è –í–æ–π—Å–∫–æ", callback_data="upgrade_road"),
                        types.InlineKeyboardButton("üè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", callback_data="upgrade_build"),
                        types.InlineKeyboardButton("üìà –≠–∫–æ–Ω–æ–º–∏–∫–∞", callback_data="upgrade_dolar"))
    inline_keyboard.row(types.InlineKeyboardButton("üåæ –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ", callback_data="upgrade_food"))
    inline_keyboard.row(types.InlineKeyboardButton(f"üí∞ –°–æ–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å {income}TSC", callback_data="income"))

    await callback_query.message.edit_text(text, reply_markup=inline_keyboard)


async def update_income(user_id: int):
    while True:
        cursor.execute(
            "SELECT army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level FROM towns WHERE user_id=?",
            (user_id,))
        result = cursor.fetchone()

        if result:
            current_army_level = result[0]
            current_health_level = result[1]
            current_courp_level = result[2]
            current_road_level = result[3]
            current_dolar_level = result[4]
            current_food_level = result[5]
            current_build_level = result[6]
        else:
            current_army_level = None
            current_health_level = None
            current_courp_level = None
            current_road_level = None
            current_dolar_level = None
            current_food_level = None
            current_build_level = None

        army_income = 1 * (2 ** current_army_level) if current_army_level is not None else 0
        health_income = 1 * (2 ** current_health_level) if current_health_level is not None else 0
        courp_income = 1 * (2 ** current_courp_level) if current_courp_level is not None else 0
        road_income = 1 * (2 ** current_road_level) if current_road_level is not None else 0
        dolar_income = 1 * (2 ** current_dolar_level) if current_dolar_level is not None else 0
        food_income = 1 * (2 ** current_food_level) if current_food_level is not None else 0
        build_income = 1 * (2 ** current_build_level) if current_build_level is not None else 0

        current_income = army_income + health_income + courp_income + road_income + dolar_income + food_income + build_income

        cursor.execute("SELECT income FROM user_income WHERE user_id=?", (user_id,))
        result = cursor.fetchone()
        if result:
            income = result[0]
        else:
            income = 0

        new_income = income + current_income

        cursor.execute("INSERT OR REPLACE INTO user_income (user_id, income) VALUES (?, ?)", (user_id, new_income))
        conn.commit()

        upgraded_army_income = 2 * (2 ** (current_army_level + 1)) if current_army_level is not None else 0
        upgraded_health_income = 2 * (2 ** (current_health_level + 1)) if current_health_level is not None else 0
        upgraded_courp_income = 2 * (2 ** (current_courp_level + 1)) if current_courp_level is not None else 0
        upgraded_road_income = 2 * (2 ** (current_road_level + 1)) if current_road_level is not None else 0
        upgraded_dolar_income = 2 * (2 ** (current_dolar_level + 1)) if current_dolar_level is not None else 0
        upgraded_food_income = 2 * (2 ** (current_food_level + 1)) if current_food_level is not None else 0
        upgraded_build_income = 2 * (2 ** (current_build_level + 1)) if current_build_level is not None else 0

        upgraded_income = upgraded_army_income + upgraded_health_income + upgraded_courp_income + upgraded_road_income + upgraded_dolar_income + upgraded_food_income + upgraded_build_income

        cursor.execute("UPDATE towns SET upgraded_income=? WHERE user_id=?", (upgraded_income, user_id))
        conn.commit()

        cursor.execute("SELECT upgraded_income FROM towns WHERE user_id=?", (user_id,))
        result = cursor.fetchone()
        if result:
            current_upgraded_income = result[0]
        else:
            current_upgraded_income = 0

        if current_upgraded_income != upgraded_income:
            cursor.execute("UPDATE towns SET upgraded_income=? WHERE user_id=?", (upgraded_income, user_id))
            conn.commit()
            current_upgraded_income = upgraded_income

        hourly_income = current_income
        partial_income = int(hourly_income / 720)

        while True:
            await asyncio.sleep(5)

            cursor.execute("SELECT income FROM user_income WHERE user_id=?", (user_id,))
            result = cursor.fetchone()
            if result:
                income = result[0]
            else:
                income = 0

            new_income = income + partial_income

            cursor.execute("INSERT OR REPLACE INTO user_income (user_id, income) VALUES (?, ?)", (user_id, new_income))
            conn.commit()

            cursor.execute("SELECT upgraded_income FROM towns WHERE user_id=?", (user_id,))
            result = cursor.fetchone()

            if result:
                current_upgraded_income = result[0]
            else:
                current_upgraded_income = 0

            if current_upgraded_income != upgraded_income:
                cursor.execute("UPDATE towns SET upgraded_income=? WHERE user_id=?", (upgraded_income, user_id))
                conn.commit()

            cursor.execute(
                "SELECT army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level FROM towns WHERE user_id=?",
                (user_id,))
            result = cursor.fetchone()

            if result:
                current_army_level = result[0]
                current_health_level = result[1]
                current_courp_level = result[2]
                current_road_level = result[3]
                current_dolar_level = result[4]
                current_food_level = result[5]
                current_build_level = result[6]
            else:
                current_army_level = None
                current_health_level = None
                current_courp_level = None
                current_road_level = None
                current_dolar_level = None
                current_food_level = None
                current_build_level = None

            army_income = 1 * (2 ** current_army_level) if current_army_level is not None else 0
            health_income = 1 * (2 ** current_health_level) if current_health_level is not None else 0
            courp_income = 1 * (2 ** current_courp_level) if current_courp_level is not None else 0
            road_income = 1 * (2 ** current_road_level) if current_road_level is not None else 0
            dolar_income = 1 * (2 ** current_dolar_level) if current_dolar_level is not None else 0
            food_income = 1 * (2 ** current_food_level) if current_food_level is not None else 0
            build_income = 1 * (2 ** current_build_level) if current_build_level is not None else 0

            current_income = army_income + health_income + courp_income + road_income + dolar_income + food_income + build_income

            upgraded_army_income = 2 * (2 ** (current_army_level + 1)) if current_army_level is not None else 0
            upgraded_health_income = 2 * (2 ** (current_health_level + 1)) if current_health_level is not None else 0
            upgraded_courp_income = 2 * (2 ** (current_courp_level + 1)) if current_courp_level is not None else 0
            upgraded_road_income = 2 * (2 ** (current_road_level + 1)) if current_road_level is not None else 0
            upgraded_dolar_income = 2 * (2 ** (current_dolar_level + 1)) if current_dolar_level is not None else 0
            upgraded_food_income = 2 * (2 ** (current_food_level + 1)) if current_food_level is not None else 0
            upgraded_build_income = 2 * (2 ** (current_build_level + 1)) if current_build_level is not None else 0

            upgraded_income = upgraded_army_income + upgraded_health_income + upgraded_courp_income + upgraded_road_income + upgraded_dolar_income + upgraded_food_income + upgraded_build_income

            if upgraded_income != current_upgraded_income:
                cursor.execute("UPDATE towns SET upgraded_income=? WHERE user_id=?", (upgraded_income, user_id))
                conn.commit()
                current_upgraded_income = upgraded_income

            hourly_income = current_income
            partial_income = int(hourly_income / 720)


def update_user_balance(user_id, balance):
    with sqlite3.connect("bot_data.db") as conn:
        cursor = conn.cursor()
        cursor.execute("CREATE TABLE IF NOT EXISTS balances (user_id INTEGER PRIMARY KEY, balance TEXT)")
        cursor.execute("SELECT balance FROM balances WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()

        if result:
            current_balance = int(result[0])
        else:
            current_balance = 0

        new_balance = current_balance + int(balance)

        cursor.execute("INSERT OR REPLACE INTO balances (user_id, balance) VALUES (?, ?)", (user_id, str(new_balance)))
        conn.commit()


def get_user_balance(user_id):
    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        return result[0]
    else:
        return 0


def get_last_collect_time(user_id):
    return time.time() - 3600


def update_last_collect_time(user_id, timestamp):
    pass


def get_last_mine_command_time(user_id):
    return balances.get(f"{user_id}_last_mine_command_time", 0)


def save_last_mine_command_time(user_id, timestamp):
    balances[f"{user_id}_last_mine_command_time"] = timestamp


async def perform_update_income(user_id):
    global is_update_income_running

    if not is_update_income_running.get(user_id, False):
        is_update_income_running[user_id] = True
        await update_income(user_id)
        is_update_income_running[user_id] = False


async def update_income_task(user_id):
    while True:
        await perform_update_income(user_id)
        await asyncio.sleep(5)

    user_ids = get_all_user_ids()

    is_update_income_running = {}

    for user_id in user_ids:
        asyncio.create_task(update_income_task(user_id))


async def on():
    user_should_be_notified = -1001592098459
    await bot.send_message(user_should_be_notified, '–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª—Å—è...#restart\n\n@RudeusNG @FremanMQ')
    while True:
        await bot.send_message(chat_id='-1001592098459', text='–°–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω...')
        await asyncio.sleep(120)


keep_alive()
if __name__ == '__main__':
    on_start = asyncio.get_event_loop()
    on_start.create_task(on())
    asyncio.run(aiogram.executor.start_polling(dp, skip_updates=True))
    loop = asyncio.get_event_loop()
    loop.create_task(perform_update_income())
    executor.start_polling(dp, skip_updates=True)import aiogram
import asyncio
import random
import time
import sqlite3
import aiocron
from datetime import timedelta
from aiogram import types
from aiogram import exceptions
from aiogram.types import message
from aiogram import Bot, types, Dispatcher, executor
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.types import KeyboardButton
from bg import keep_alive

bot = aiogram.Bot(token='6421925198:AAHPGXJU6U9LwnvA5C_GHK3iLwlTsl3Fdds')
dp = aiogram.Dispatcher(bot)

allowed_user_id = [1108449415, 1129234807]

balances = {}

towns = {}

last_command_executed = {}

is_update_income_running = {}

winner_name = ""

list_id = []

conn = sqlite3.connect('bot_data.db')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS balances
                  (user_id INTEGER PRIMARY KEY, balance INTEGER)''')
conn.commit()

cursor.execute('''CREATE TABLE IF NOT EXISTS towns
                  (user_id INTEGER PRIMARY KEY, name TEXT, army_level INTEGER, health_level INTEGER, courp_level INTEGER, road_level INTEGER, dolar_level INTEGER, food_level INTEGER, build_level INTEGER, upgraded_income INTEGER, change_count INTEGER, change_allowed INTEGER)''')
conn.commit()

cursor.execute("CREATE TABLE IF NOT EXISTS user_income (user_id INTEGER PRIMARY KEY, income INTEGER DEFAULT 0)")
conn.commit()


@dp.message_handler(commands=['start'])
async def main_command_handler(message: aiogram.types.Message):
    user_id = message.from_user.id
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –°–æ–∑–¥–∞–π —Å–≤–æ—ë –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ –∏ —Å—Ç–∞–Ω—å –ª—É—á—à–∏–º!\n –ù–∞–∂–º–∏ /create")

user_steps = {}

@dp.message_handler(commands=['change'])
async def change_command_handler(message: aiogram.types.Message):
    user_id = message.from_user.id

    cursor.execute("SELECT name, change_count FROM towns WHERE user_id=?", (user_id,))
    result = cursor.fetchone()

    if not result:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –≥–æ—Ä–æ–¥.")
        return

    city_name, change_count = result
    change_count = change_count if change_count else 0
    change_price = 5000 * (10 ** change_count)

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.row(
        types.InlineKeyboardButton("–î–∞", callback_data="confirm_change"),
        types.InlineKeyboardButton("–ù–µ—Ç", callback_data="cancel_change")
    )

    await message.reply(
        f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞?\n"
        f"–¶–µ–Ω–∞: {change_price}TSC.\n\n"
        f"–¢–µ–∫—É—â–µ–µ –∏–º—è –≥–æ—Ä–æ–¥–∞: {city_name}",
        reply_markup=inline_keyboard
    )

    user_steps[user_id] = 1

@dp.callback_query_handler(lambda callback_query: callback_query.data in ['confirm_change', 'cancel_change'])
async def process_change_confirmation(callback_query: aiogram.types.CallbackQuery):
    user_id = callback_query.from_user.id

    if callback_query.data == 'confirm_change':
        current_balance = get_user_balance(user_id)
        change_count = get_change_count(user_id)
        change_count = change_count if change_count else 0
        change_price = 500 * (10 ** change_count)

        if current_balance < change_price:
            await callback_query.message.edit_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞.")
            return

        await callback_query.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")

        user_steps[user_id] = 2

@dp.message_handler(lambda message: user_steps.get(message.from_user.id) == 2)
async def process_new_city_name(message: aiogram.types.Message):
    user_id = message.from_user.id
    new_city_name = message.text.strip()

    if new_city_name:
        cursor.execute("SELECT name FROM towns WHERE LOWER(name) = LOWER(?)", (new_city_name,))
        result = cursor.fetchone()

        if result:
            await message.reply("–≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
            return

        current_balance = get_user_balance(user_id)
        change_count = get_change_count(user_id)
        change_count = change_count if change_count else 0
        change_price = 500 * (10 ** change_count)

        if current_balance < change_price:
            await message.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞.")
            return

        cursor.execute("UPDATE towns SET name=?, change_count=? WHERE user_id=?", (new_city_name, change_count + 1, user_id))
        conn.commit()

        update_user_balance(user_id, -change_price)

        await message.reply(f"–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_city_name}.")

        user_steps[user_id] = 1

def get_change_count(user_id):
    cursor.execute("SELECT change_count FROM towns WHERE user_id=?", (user_id,))
    result = cursor.fetchone()

    return result[0] if result else 0



@dp.message_handler(commands=['donat'])
async def main_command_handler(message: aiogram.types.Message):
    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.add(types.InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", url="https://t.me/RudeusNG"))
    await message.answer('–î–æ–Ω–∞—Ç:\n\n–ü–æ–∫—É–ø–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ 1:100.000\n(–¶–µ–Ω–∞ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å—Å—è\n –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—É–º–º–∞—Ä–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –≤–∞—à–µ–≥–æ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞!)\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µüëáüèª', reply_markup=inline_keyboard)

@dp.message_handler(commands=['JHKL'])
async def main_command_handler(message: aiogram.types.Message):
    promo_mon = 100000
    user_id = message.from_user.id

    if user_id not in list_id:
        list_id.append(user_id)
        #recipient_id = message.reply_to_message.from_user.id
        recipient_id = message.from_user.id
        update_user_balance(recipient_id, promo_mon)
        await message.answer(f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {promo_mon}TSC.")

    else:
        await message.answer('–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –¥–µ–Ω—å–≥–∏ —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞!\n–ñ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ!')
        print(list_id)

@dp.message_handler(commands=['info'])
async def main_command_handler(message: aiogram.types.Message):
    await message.answer('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: The Sovereign‚Äôs Circle\n\n–í–µ—Ä—Å–∏—è: v2.5\n–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: 01.10.2023')


us_lis = []

@dp.message_handler(regexp=r'^–∫—É–±–∏–∫ (\d+)$')
async def initiate_dice_game(message: types.Message):
    user_id = message.from_user.id
    amount = int(message.text.split()[1])

    reply_message = message.reply_to_message
    recipient = reply_message.from_user

    us_lis.append(user_id)
    us_lis.append(recipient)

    if len(us_lis) > 2:
        await message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —É–∂–µ –∏–≥—Ä–∞—é—Ç, –¥–æ–∂–¥–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –æ—á–µ—Ä–µ–¥–∏')
        return

    if not recipient:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")
        return

    if recipient.id == user_id:
        await message.reply("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å —Å–∞–º–∏ —Å —Å–æ–±–æ–π")
        return

    recipient_mention = recipient.get_mention(as_html=True)
    recipient_username = recipient.username
    if not recipient_username:
        recipient_username = recipient.first_name

    recipient_id = recipient.id

    sender_balance = get_user_balance(user_id)
    recipient_balance = get_user_balance(recipient_id)

    if sender_balance < amount and recipient_balance > amount:
        await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")
        del us_lis[:]
        return

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.row(
        types.InlineKeyboardButton("‚úÖÔ∏è–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤‚úÖÔ∏è",
                                   callback_data=f"dice_challenge_accept:{amount}:{user_id}:{recipient_id}"),
        types.InlineKeyboardButton("‚ùåÔ∏è–æ—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–∑–æ–≤‚ùåÔ∏è",
                                   callback_data=f"dice_challenge_decline:{user_id}:{recipient_id}")
    )

    await message.reply(
    f"{recipient_mention}, –≤–∞—Å –≤—ã–∑—ã–≤–∞—é—Ç –Ω–∞ –∏–≥—Ä—É –≤ –∫—É–±–∏–∫!\n–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: {amount} TSC",
                                         reply_markup=inline_keyboard,
                                         parse_mode=types.ParseMode.HTML
                                         )

    await asyncio.sleep(20)
    await message.answer('–í—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ–∫–æ–Ω—á–µ–Ω–æ')
    del us_lis[:]


@dp.callback_query_handler(lambda c: c.data.startswith('dice_challenge_accept'))
async def accept_dice_challenge_handler(callback_query: types.CallbackQuery):
    challenge_data = callback_query.data.split(":")
    amount = int(challenge_data[1])
    challenger_id = int(challenge_data[2])
    recipient_id = int(challenge_data[3])
    challenger = await bot.get_chat_member(chat_id=callback_query.message.chat.id, user_id=challenger_id)
    recipient = await bot.get_chat_member(chat_id=callback_query.message.chat.id, user_id=recipient_id)

    if callback_query.from_user.id != recipient_id:
        await callback_query.answer("–ù–µ –≤–∞–º –≤—ã–∑–æ–≤!", show_alert=True)
        return
    await callback_query.message.delete()


    floe_message = await bot.send_message(chat_id=callback_query.message.chat.id, text="–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...")
    floe_message_id = floe_message.message_id

    await asyncio.sleep(1)

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=floe_message_id)

    recipient_message = await bot.send_message(chat_id=callback_query.message.chat.id,
                                               text=f"{challenger.user.mention} –±—Ä–æ—Å–∞–µ—Ç –∫—É–±–∏–∫...",
                                               parse_mode=types.ParseMode.HTML)
    recipient_message_id = recipient_message.message_id

    user_data = await bot.send_dice(chat_id=callback_query.message.chat.id, emoji="üé≤",
                                    reply_to_message_id=callback_query.message.reply_to_message.message_id)
    dice_result_recipient = user_data['dice']['value']

    await asyncio.sleep(4)

    challenger_message = await bot.send_message(chat_id=callback_query.message.chat.id,
                                                text=f"{recipient.user.mention} –±—Ä–æ—Å–∞–µ—Ç –∫—É–±–∏–∫...")
    challenger_message_id = challenger_message.message_id

    user_data = await bot.send_dice(chat_id=callback_query.message.chat.id, emoji="üé≤")
    dice_result_challenger = user_data['dice']['value']

    await asyncio.sleep(4)

    if dice_result_challenger > dice_result_recipient:
        update_user_balance(challenger_id, -amount)
        update_user_balance(recipient_id, amount)
        winner_user = challenger.user
    elif dice_result_challenger < dice_result_recipient:
        update_user_balance(challenger_id, amount)
        update_user_balance(recipient_id, -amount)
        winner_user = recipient.user
    else:
        winner_user = None

    if winner_user:
        await callback_query.message.answer(f"{winner_user.first_name} –ø—Ä–æ–∏–≥—Ä–∞–ª!", parse_mode=types.ParseMode.HTML)
    else:
        await callback_query.message.answer("–ù–∏—á—å—è!")

    del us_lis[:]


@dp.callback_query_handler(lambda c: c.data.startswith('dice_challenge_decline'))
async def decline_dice_challenge_handler(callback_query: types.CallbackQuery):
    challenge_data = callback_query.data.split(":")
    user_id = int(challenge_data[1])
    recipient_id = int(challenge_data[2])

    if callback_query.from_user.id != recipient_id:
        await callback_query.answer("–ù–µ –≤–∞–º –≤—ã–∑–æ–≤!", show_alert=True)
        return

    await callback_query.message.delete()

    await callback_query.message.answer(f"{callback_query.from_user.first_name} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤—ã–∑–æ–≤")

    del us_lis[:]


@dp.message_handler(commands=['help'])
async def main_command_handler(message: aiogram.types.Message):
    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.add(types.InlineKeyboardButton("–ü–æ–º–æ—â—å", url="https://t.me/RudeusNG"))

    await message.answer("–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≥—Ä—É–ø–ø—ã\n–õ–∏–±–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É @RudeusNG", reply_markup=inline_keyboard)

@dp.message_handler(commands=['game'])
async def main_command_handler(message: aiogram.types.Message):
  await message.answer('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ª–∏—à—å –ö—É–±–∏–∫*\n–ß—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å *–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –ø—Ä–æ—Ç–∏–≤, –∫–æ—Ç—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å - –Ω–∞–ø–∏—à–∏—Ç–µ\n *–ö—É–±–∏–∫ –°–£–ú–ú–ê*')

@dp.message_handler(commands=['remove'])
async def main_command_handler(message: aiogram.types.Message):
    await message.answer('–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /start', reply_markup=ReplyKeyboardRemove())

@dp.message_handler(commands=['rules'])
async def main_command_handler(message: aiogram.types.Message):
    await message.answer('–í—Å–µ–º, –ø—Ä–∏–≤–µ—Ç!\n–≠—Ç–æ The Sovereigns Circle Bot\n–ò–≥—Ä–æ–≤–æ–π –±–æ—Ç –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!!!!\n–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Å—Ç—ã!\n–í–µ—Å–µ–ª–∏—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∞—Ç—å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –æ—Ç –±–æ—Ç–∞)\n'
                         '\n–í –±–æ—Ç–µ –µ—Å—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç –ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ –∫ —á–µ–º—É\n'
                         '\n–ö–Ω–æ–ø–∫–∞ /kingdom, –Ω—É–∂–Ω–∞, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—ë –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ, —Å–æ–±–∏—Ä–∞—Ç—å –∫–∞–∑–Ω—É –∏ —É–ª—É—á—à–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏\n'
                         '\n–ö–Ω–æ–ø–∫–∞ /farm, –¥–ª—è —Å–±–æ—Ä–∞ –¥–µ–Ω–µ–≥, —Å—É–º–º–∞ –¥–µ–Ω–µ–≥ –≤—ã–ø–∞–¥–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ)\n'
                         '\n–ö–Ω–æ–ø–∫–∞ /balance, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –Ω–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã –±–æ–≥–∞—Ç—ã ;)\n'
                         '\n–í –∫–Ω–æ–ø–∫–µ /game –º—ã –¥–æ–±–∞–≤–∏–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–≤–ª–µ–∫–∞–ª–æ–≤–∫–∏, —á—Ç–æ–±—ã —Å –≤–µ—Å–µ–ª—å–µ–º –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è)\n'
                        
                         '\n–í –∫–Ω–æ–ø–∫–µ –ü–æ–º–æ—â—å —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã)\n'
                         '\n–ß—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏: (*–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–º—É, –∫–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –¥–µ–Ω–µ–≥ —Å —Ç–µ–∫—Å—Ç–æ–º - *–ü–µ—Ä–µ–¥–∞—Ç—å –°–£–ú–ú–ê**'
                         '\n–í—Å–µ–º –ø—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã)\n'
                         '\n–ï—Å–ª–∏ —É –∫–æ–≥–æ-—Ç–æ –µ—Å—Ç—å –∏–¥–µ–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞ - –ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –ø–µ—Ä–µ–π–¥—è –ø–æ –∫–Ω–æ–ø–∫–µ –ü–æ–º–æ—â—å\n'
                         '–õ–∏–±–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É @RudeusNG')

@dp.message_handler(regexp=r'^–≤—ã–¥–∞—Ç—å (\d+)$')
async def give_command_handler(message: types.Message):
    user_id = message.from_user.id

    if user_id not in allowed_user_id or not message.reply_to_message:
        await message.answer()
        return

    try:
        amount = int(message.text.split()[1])
    except (ValueError, IndexError):
        await message.answer()
        return

    if amount <= 0:
        await message.answer()
        return

    recipient_id = message.reply_to_message.from_user.id
    update_user_balance(recipient_id, amount)
    await message.answer(f"–í—ã –≤—ã–¥–∞–ª–∏ {amount}TSC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")


@dp.message_handler(regexp=r'^—Å–Ω—è—Ç—å (\d+)$')
async def give_command_handler(message: types.Message):
    user_id = message.from_user.id

    if user_id not in allowed_user_id or not message.reply_to_message:
        await message.answer()
        return

    try:
        amount = int(message.text.split()[1])
    except (ValueError, IndexError):
        await message.answer()
        return

    if amount <= 0:
        await message.answer()
        return

    recipient_id = message.reply_to_message.from_user.id
    update_user_balance(recipient_id, -amount)
    await message.answer(f"–í—ã —Å–Ω—è–ª–∏ {amount}TSC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")


@dp.message_handler(commands=['farm'])
async def main_command_handler(message: aiogram.types.Message):
    user_id = message.from_user.id

    last_mine_command_time = get_last_mine_command_time(user_id)
    current_time = time.time()

    if current_time - last_mine_command_time <  60 * 60:
        time_left = timedelta(seconds=(60 * 60) - (current_time - last_mine_command_time))
        hours = time_left.seconds // 3600
        minutes = (time_left.seconds % 3600) // 60
        seconds = time_left.seconds % 60
        await message.reply(
            f"–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /farm —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 1 —á–∞—Å.\n –û—Å—Ç–∞–ª–æ—Å—å {minutes} –º–∏–Ω. {seconds} —Å–µ–∫.")
    else:
        new_balance = random.randint(50, 300)

        update_user_balance(user_id, new_balance)

        save_last_mine_command_time(user_id, current_time)

        await message.reply(f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {new_balance}TSC")


@dp.message_handler(commands=['balance'])
async def balance_command_handler(message: types.Message):
    user_id = message.from_user.id
    current_balance = get_user_balance(user_id)
    await message.reply(f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance}TSC.")


@dp.message_handler(regexp=r'^–ø–µ—Ä–µ–¥–∞—Ç—å (\d+)$')
async def transfer_command_handler(message: aiogram.types.Message):
    user_id = message.from_user.id
    amount = int(message.text.split()[1])

    reply_message = message.reply_to_message

    if not reply_message or reply_message.from_user.id == user_id:
        await message.reply()
        return

    recipient_id = reply_message.from_user.id

    if amount <= 0:
        await message.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
        return

    sender_balance = get_user_balance(user_id)
    if sender_balance < amount:
        await message.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
        return

    update_user_balance(user_id, -amount)
    update_user_balance(recipient_id, amount)

    await message.reply(f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ {amount}TSC.")


@dp.message_handler(commands=['top'])
async def top_command_handler(message: types.Message):
    user_id = message.from_user.id

    cursor.execute("SELECT b.user_id, b.balance, t.name FROM balances AS b JOIN towns AS t ON b.user_id = t.user_id ORDER BY b.balance DESC LIMIT 12")
    top_users = cursor.fetchall()

    top_message = "–¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤:\n\n"
    for index, (user_id, balance, town_name) in enumerate(top_users, start=1):
        user = await bot.get_chat_member(message.chat.id, user_id)
        first_name = user.user.first_name
        if user_id in allowed_user_id:
            continue

        else:
            top_message += f"{index-2}) –í–ª–∞–¥–µ–ª–µ—Ü: {first_name}\n –ì–æ—Ä–æ–¥: {town_name} \n {balance} TSC\n\n"

    await message.reply(top_message, parse_mode=types.ParseMode.HTML)


@dp.message_handler(commands=['create'])
async def create_command_handler(message: aiogram.types.Message):
    user_id = message.from_user.id
    if user_id == 5266482566 or user_id == 5707895629:
      await message.answer('–í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ!)')
    else:

      cursor.execute("SELECT name FROM towns WHERE user_id=?", (user_id,))
      result = cursor.fetchone()

      if result:
          await message.reply(
              "–í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.\n –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /kingdom, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–µ.")
          return

      await message.reply("–°–æ–∑–¥–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞.")

      dp.register_message_handler(process_city_name, lambda message: message.from_user.id == user_id)


async def process_city_name(message: aiogram.types.Message):
      user_id = message.from_user.id
      city_name = message.text

      cursor.execute("INSERT INTO towns (user_id, name) VALUES (?, ?)", (user_id, city_name))
      conn.commit()

      await message.reply(
          "–í–∞—à–µ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /kingdom —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–≤–æ—ë –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ, –∂–µ–ª–∞–µ–º —É–¥–∞—á–∏!")


@dp.message_handler(commands=['kingdom'])
async def town_command_handler(message: aiogram.types.Message):
    user_id = message.from_user.id

    cursor.execute(
        "SELECT name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income FROM towns WHERE user_id=?",
        (user_id,))
    result = cursor.fetchone()

    if not result:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.")
        return

    city_name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income = result

    army_level = army_level or 0
    health_level = health_level or 0
    courp_level = courp_level or 0
    road_level = road_level or 0
    dolar_level = dolar_level or 0
    food_level = food_level or 0
    build_level = build_level or 0

    cursor.execute(""
                   "balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    cursor.execute("SELECT income FROM user_income WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        income = result[0]
    else:
        income = 0

    text = f"üèØ–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {city_name}\n\nüõ°–ó–∞—â–∏—Ç–∞: {army_level}\nüíñ–ó–¥–æ—Ä–æ–≤—å–µ: {health_level}\n‚öñÔ∏è–ü–æ–ª–∏—Ç–∏–∫–∞: {courp_level}\n‚öîÔ∏è–í–æ–π—Å–∫–æ: {road_level}\nüè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {build_level}\nüìà–≠–∫–æ–Ω–æ–º–∏–∫–∞: {dolar_level}\nüåæ–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ: {food_level}\n\nüí∞–ë—é–¥–∂–µ—Ç –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞: {income}TSC\n\nüíéTSC –Ω–∞ —Å—á–µ—Ç—É: {current_balance}TSC"

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.row(types.InlineKeyboardButton("üõ° –ó–∞—â–∏—Ç–∞", callback_data="upgrade_army"),
                        types.InlineKeyboardButton("üíñ –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="upgrade_health"),
                        types.InlineKeyboardButton("‚öñÔ∏è –ü–æ–ª–∏—Ç–∏–∫–∞", callback_data="upgrade_courp"))
    inline_keyboard.row(types.InlineKeyboardButton("‚öîÔ∏è –í–æ–π—Å–∫–æ", callback_data="upgrade_road"),
                        types.InlineKeyboardButton("üè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", callback_data="upgrade_build"),
                        types.InlineKeyboardButton("üìà –≠–∫–æ–Ω–æ–º–∏–∫–∞", callback_data="upgrade_dolar"))
    inline_keyboard.row(types.InlineKeyboardButton("üåæ –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ", callback_data="upgrade_food"))
    inline_keyboard.row(types.InlineKeyboardButton(f"üí∞ –°–æ–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å {income}TSC", callback_data="income"))

    await message.answer(text, reply_markup=inline_keyboard)
    asyncio.create_task(update_income_task(user_id))


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'upgrade_road')
async def upgrade_road_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if user_id in last_command_executed:
        last_executed_time = last_command_executed[user_id]
        current_time = time.time()
        if current_time - last_executed_time < 1.5:
            await asyncio.sleep(1.5 - (current_time - last_executed_time))

    last_command_executed[user_id] = time.time()

    cursor.execute(
        "SELECT name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income FROM towns WHERE user_id=?",
        (user_id,))
    result = cursor.fetchone()
    if result:
        city_name = result[0]
        army_level = result[1]
        health_level = result[2]
        courp_level = result[3]
        road_level = result[4]
        dolar_level = result[5]
        food_level = result[6]
        build_level = result[7]
    else:
        await callback_query.message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.")
        return

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    if road_level is not None:
        new_road_level = road_level + 1
    else:
        new_road_level = 1

    upgrade_cost = 500 * (2 ** (new_road_level - 1))

    current_road_income_5s = 1 * (2 ** road_level) if road_level is not None else 0

    upgraded_road_income_5s = 1 * (2 ** new_road_level) if new_road_level is not None else 0

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.add(types.InlineKeyboardButton("–£–ª—É—á—à–∏—Ç—å", callback_data="upgrade_roads"))
    inline_keyboard.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_town'))

    text = f"üèØ–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {city_name}\n\n–ü–∞—Ä–∞–º–µ—Ç—Ä: ‚öîÔ∏è–í–æ–π—Å–∫–æ\n–£—Ä–æ–≤–µ–Ω—å: {road_level if road_level is not None else 0}\n\n–î–æ—Ö–æ–¥ –≤ —á–∞—Å: {current_road_income_5s}TSC\n–î–æ—Ö–æ–¥ –≤ —á–∞—Å –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è: {upgraded_road_income_5s}TSC\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è: {upgrade_cost}TSC\nüíéTSC –Ω–∞ —Å—á–µ—Ç—É: {current_balance}TSC"

    await callback_query.message.edit_text(text, reply_markup=inline_keyboard)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'upgrade_dolar')
async def upgrade_dolar_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if user_id in last_command_executed:
        last_executed_time = last_command_executed[user_id]
        current_time = time.time()
        if current_time - last_executed_time < 1.5:
            await asyncio.sleep(1.5 - (current_time - last_executed_time))

    last_command_executed[user_id] = time.time()

    cursor.execute(
        "SELECT name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income FROM towns WHERE user_id=?",
        (user_id,))
    result = cursor.fetchone()
    if result:
        city_name = result[0]
        army_level = result[1]
        health_level = result[2]
        courp_level = result[3]
        road_level = result[4]
        dolar_level = result[5]
        food_level = result[6]
        build_level = result[7]
    else:
        await callback_query.message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.")
        return

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    if dolar_level is not None:
        new_dolar_level = courp_level + 1
    else:
        new_dolar_level = 1

    upgrade_cost = 500 * (2 ** (new_dolar_level - 1))

    current_dolar_income_5s = 1 * (2 ** dolar_level) if dolar_level is not None else 0

    upgraded_dolar_income_5s = 1 * (2 ** new_dolar_level) if new_dolar_level is not None else 0

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.add(types.InlineKeyboardButton("–£–ª—É—á—à–∏—Ç—å", callback_data="upgrade_dolars"))
    inline_keyboard.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_town'))

    text = f"üèØ–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {city_name}\n\n–ü–∞—Ä–∞–º–µ—Ç—Ä: üìà–≠–∫–æ–Ω–æ–º–∏–∫–∞\n–£—Ä–æ–≤–µ–Ω—å: {dolar_level if dolar_level is not None else 0}\n\n–î–æ—Ö–æ–¥ –≤ —á–∞—Å: {current_dolar_income_5s}TSC\n–î–æ—Ö–æ–¥ –≤ —á–∞—Å –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è: {upgraded_dolar_income_5s}TSC\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è: {upgrade_cost}TSC\nüíéTSC –Ω–∞ —Å—á–µ—Ç—É: {current_balance}TSC"

    await callback_query.message.edit_text(text, reply_markup=inline_keyboard)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'upgrade_food')
async def upgrade_food_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if user_id in last_command_executed:
        last_executed_time = last_command_executed[user_id]
        current_time = time.time()
        if current_time - last_executed_time < 1.5:
            await asyncio.sleep(1.5 - (current_time - last_executed_time))

    last_command_executed[user_id] = time.time()

    cursor.execute(
        "SELECT name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income FROM towns WHERE user_id=?",
        (user_id,))
    result = cursor.fetchone()
    if result:
        city_name = result[0]
        army_level = result[1]
        health_level = result[2]
        courp_level = result[3]
        road_level = result[4]
        dolar_level = result[5]
        food_level = result[6]
        build_level = result[7]
    else:
        await callback_query.message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.")
        return

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    if food_level is not None:
        new_food_level = food_level + 1
    else:
        new_food_level = 1

    upgrade_cost = 500 * (2 ** (new_food_level - 1))

    current_food_income_5s = 1 * (2 ** food_level) if food_level is not None else 0

    upgraded_food_income_5s = 1 * (2 ** new_food_level) if new_food_level is not None else 0

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.add(types.InlineKeyboardButton("–£–ª—É—á—à–∏—Ç—å", callback_data="upgrade_foods"))
    inline_keyboard.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_town'))

    text = f"üèØ–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {city_name}\n\n–ü–∞—Ä–∞–º–µ—Ç—Ä: üåæ–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ\n–£—Ä–æ–≤–µ–Ω—å: {food_level if food_level is not None else 0}\n\n–î–æ—Ö–æ–¥ –≤ —á–∞—Å: {current_food_income_5s}TSC\n–î–æ—Ö–æ–¥ –≤ —á–∞—Å –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è: {upgraded_food_income_5s}TSC\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è: {upgrade_cost}TSC\nüíéTSC –Ω–∞ —Å—á–µ—Ç—É: {current_balance}TSC"

    await callback_query.message.edit_text(text, reply_markup=inline_keyboard)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'upgrade_build')
async def upgrade_build_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if user_id in last_command_executed:
        last_executed_time = last_command_executed[user_id]
        current_time = time.time()
        if current_time - last_executed_time < 1.5:
            await asyncio.sleep(1.5 - (current_time - last_executed_time))

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    last_command_executed[user_id] = time.time()

    cursor.execute(
        "SELECT name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income FROM towns WHERE user_id=?",
        (user_id,))
    result = cursor.fetchone()
    if result:
        city_name = result[0]
        army_level = result[1]
        health_level = result[2]
        courp_level = result[3]
        road_level = result[4]
        dolar_level = result[5]
        food_level = result[6]
        build_level = result[7]
    else:
        await callback_query.message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.")
        return

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    if build_level is not None:
        new_build_level = build_level + 1
    else:
        new_build_level = 1

    upgrade_cost = 500 * (2 ** (new_build_level - 1))

    current_build_income_5s = 1 * (2 ** build_level) if build_level is not None else 0

    upgraded_build_income_5s = 1 * (2 ** new_build_level) if new_build_level is not None else 0

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.add(types.InlineKeyboardButton("–£–ª—É—á—à–∏—Ç—å", callback_data="upgrade_builds"))
    inline_keyboard.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_town'))

    text = f"üèØ–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {city_name}\n\n–ü–∞—Ä–∞–º–µ—Ç—Ä: üè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞\n–£—Ä–æ–≤–µ–Ω—å: {build_level if build_level is not None else 0}\n\n–î–æ—Ö–æ–¥ –≤ —á–∞—Å: {current_build_income_5s}TSC\n–î–æ—Ö–æ–¥ –≤ —á–∞—Å –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è: {upgraded_build_income_5s}TSC\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è: {upgrade_cost}TSC\nüíéTSC –Ω–∞ —Å—á–µ—Ç—É: {current_balance}TSC"

    await callback_query.message.edit_text(text, reply_markup=inline_keyboard)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'upgrade_courp')
async def upgrade_courp_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if user_id in last_command_executed:
        last_executed_time = last_command_executed[user_id]
        current_time = time.time()
        if current_time - last_executed_time < 1.5:
            await asyncio.sleep(1.5 - (current_time - last_executed_time))

    last_command_executed[user_id] = time.time()

    cursor.execute(
        "SELECT name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income FROM towns WHERE user_id=?",
        (user_id,))
    result = cursor.fetchone()
    if result:
        city_name = result[0]
        army_level = result[1]
        health_level = result[2]
        courp_level = result[3]
        road_level = result[4]
        dolar_level = result[5]
        food_level = result[6]
        build_level = result[7]
    else:
        await callback_query.message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.")
        return

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    if courp_level is not None:
        new_courp_level = courp_level + 1
    else:
        new_courp_level = 1

    upgrade_cost = 500 * (2 ** (new_courp_level - 1))

    current_courp_income_5s = 1 * (2 ** courp_level) if courp_level is not None else 0

    upgraded_courp_income_5s = 1 * (2 ** new_courp_level) if new_courp_level is not None else 0

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.add(types.InlineKeyboardButton("–£–ª—É—á—à–∏—Ç—å", callback_data="upgrade_courps"))
    inline_keyboard.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_town'))

    text = f"üèØ–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {city_name}\n\n–ü–∞—Ä–∞–º–µ—Ç—Ä: ‚öñÔ∏è–ü–æ–ª–∏—Ç–∏–∫–∞\n–£—Ä–æ–≤–µ–Ω—å: {courp_level if courp_level is not None else 0}\n\n–î–æ—Ö–æ–¥ –≤ —á–∞—Å: {current_courp_income_5s}TSC\n–î–æ—Ö–æ–¥ –≤ —á–∞—Å –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è: {upgraded_courp_income_5s}TSC\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è: {upgrade_cost}TSC\nüíéTSC –Ω–∞ —Å—á–µ—Ç—É: {current_balance}TSC"

    await callback_query.message.edit_text(text, reply_markup=inline_keyboard)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'upgrade_army')
async def upgrade_army_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if user_id in last_command_executed:
        last_executed_time = last_command_executed[user_id]
        current_time = time.time()
        if current_time - last_executed_time < 1.5:
            await asyncio.sleep(1.5 - (current_time - last_executed_time))

    last_command_executed[user_id] = time.time()

    cursor.execute(
        "SELECT name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level FROM towns WHERE user_id=?",
        (user_id,))
    result = cursor.fetchone()

    if not result:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.")
        return

    city_name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level = result

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    cursor.execute("SELECT army_level FROM towns WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_army_level = result[0]
    else:
        current_army_level = 0

    if current_army_level is not None:
        new_army_level = current_army_level + 1
    else:
        new_army_level = 1

    upgrade_cost = 500 * (2 ** (new_army_level - 1))

    current_income_5s = 1 * (
                2 ** current_army_level) if current_army_level is not None else 0  # –¢–µ–∫—É—â–∏–π –¥–æ—Ö–æ–¥ –≤ 5 —Å–µ–∫—É–Ω–¥
    upgraded_income_5s = 1 * (
                2 ** new_army_level) if new_army_level is not None else 0  # –î–æ—Ö–æ–¥ –≤ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.add(types.InlineKeyboardButton("–£–ª—É—á—à–∏—Ç—å", callback_data="upgrade_confirm"))
    inline_keyboard.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_town'))

    text = f"üèØ–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {city_name}\n\n–ü–∞—Ä–∞–º–µ—Ç—Ä: üõ°–ó–∞—â–∏—Ç–∞\n–£—Ä–æ–≤–µ–Ω—å: {army_level if army_level is not None else 0}\n\n–î–æ—Ö–æ–¥ –≤ —á–∞—Å: {current_income_5s}TSC\n–î–æ—Ö–æ–¥ –≤ —á–∞—Å –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è: {upgraded_income_5s}$\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è: {upgrade_cost}TSC\nüíéTSC –Ω–∞ —Å—á–µ—Ç—É: {current_balance}TSC"

    await callback_query.message.edit_text(text, reply_markup=inline_keyboard)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'upgrade_health')
async def upgrade_health_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if user_id in last_command_executed:
        last_executed_time = last_command_executed[user_id]
        current_time = time.time()
        if current_time - last_executed_time < 1.5:
            await asyncio.sleep(1.5 - (current_time - last_executed_time))

    last_command_executed[user_id] = time.time()

    cursor.execute(
        "SELECT name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income FROM towns WHERE user_id=?",
        (user_id,))
    result = cursor.fetchone()
    if result:
        city_name = result[0]
        army_level = result[1]
        health_level = result[2]
        courp_level = result[3]
        road_level = result[4]
        dolar_level = result[5]
        food_level = result[6]
        build_level = result[7]
    else:
        await callback_query.message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.")
        return

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    if health_level is not None:
        new_health_level = health_level + 1
    else:
        new_health_level = 1

    upgrade_cost = 500 * (2 ** (new_health_level - 1))

    current_health_income_5s = 1 * (2 ** health_level) if health_level is not None else 0

    upgraded_health_income_5s = 1 * (2 ** new_health_level) if new_health_level is not None else 0

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.add(types.InlineKeyboardButton("–£–ª—É—á—à–∏—Ç—å", callback_data="upgrade_healths"))
    inline_keyboard.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_town'))

    text = f"üèØ–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {city_name}\n\n–ü–∞—Ä–∞–º–µ—Ç—Ä: üíñ–ó–¥–æ—Ä–æ–≤—å–µ\n–£—Ä–æ–≤–µ–Ω—å: {health_level if health_level is not None else 0}\n\n–î–æ—Ö–æ–¥ –≤ —á–∞—Å: {current_health_income_5s}TSC\n–î–æ—Ö–æ–¥ –≤ —á–∞—Å –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è: {upgraded_health_income_5s}TSC\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è: {upgrade_cost}TSC\nüíéTSC –Ω–∞ —Å—á–µ—Ç—É: {current_balance}TSC"

    await callback_query.message.edit_text(text, reply_markup=inline_keyboard)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'income')
async def income_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if user_id in last_command_executed:
        last_executed_time = last_command_executed[user_id]
        current_time = time.time()
        if current_time - last_executed_time < 1.5:
            await asyncio.sleep(1.5 - (current_time - last_executed_time))

    last_command_executed[user_id] = time.time()

    cursor.execute("SELECT income FROM user_income WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        income = result[0]
    else:
        income = 0

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    new_balance = current_balance + income

    cursor.execute("UPDATE balances SET balance=? WHERE user_id=?", (new_balance, user_id))
    conn.commit()

    cursor.execute("INSERT OR REPLACE INTO user_income (user_id, income) VALUES (?, ?)", (user_id, 0))
    conn.commit()

    await callback_query.answer(f"–í—ã —Å–æ–±—Ä–∞–ª–∏ –¥–æ—Ö–æ–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ {income}TSC.", show_alert=True)

    cursor.execute(
        "SELECT name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level FROM towns WHERE user_id=?",
        (user_id,))
    result = cursor.fetchone()

    if user_id in last_command_executed:
        last_executed_time = last_command_executed[user_id]
        current_time = time.time()
        if current_time - last_executed_time < 1.5:
            await asyncio.sleep(1.5 - (current_time - last_executed_time))

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    last_command_executed[user_id] = time.time()

    if not result:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.")
        return

    city_name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level = result

    army_level = army_level or 0
    health_level = health_level or 0
    courp_level = courp_level or 0
    road_level = road_level or 0
    dolar_level = dolar_level or 0
    food_level = food_level or 0
    build_level = build_level or 0

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    cursor.execute("SELECT income FROM user_income WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        income = result[0]
    else:
        income = 0

    text = f"üèØ–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {city_name}\n\nüõ°–ó–∞—â–∏—Ç–∞: {army_level}\nüíñ–ó–¥–æ—Ä–æ–≤—å–µ: {health_level}\n‚öñÔ∏è–ü–æ–ª–∏—Ç–∏–∫–∞: {courp_level}\n‚öîÔ∏è–í–æ–π—Å–∫–æ: {road_level}\nüè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {build_level}\nüìà–≠–∫–æ–Ω–æ–º–∏–∫–∞: {dolar_level}\nüåæ–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ: {food_level}\n\nüí∞–ë—é–¥–∂–µ—Ç –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞: {income}‚Ç¨\n\nüíéTSC –Ω–∞ —Å—á–µ—Ç—É: {current_balance}TSC"

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.row(types.InlineKeyboardButton("üõ° –ó–∞—â–∏—Ç–∞", callback_data="upgrade_army"),
                        types.InlineKeyboardButton("üíñ –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="upgrade_health"),
                        types.InlineKeyboardButton("‚öñÔ∏è –ü–æ–ª–∏—Ç–∏–∫–∞", callback_data="upgrade_courp"))
    inline_keyboard.row(types.InlineKeyboardButton("‚öîÔ∏è –í–æ–π—Å–∫–æ", callback_data="upgrade_road"),
                        types.InlineKeyboardButton("üè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", callback_data="upgrade_build"),
                        types.InlineKeyboardButton("üìà –≠–∫–æ–Ω–æ–º–∏–∫–∞", callback_data="upgrade_dolar"))
    inline_keyboard.row(types.InlineKeyboardButton("üåæ –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ", callback_data="upgrade_food"))
    inline_keyboard.row(types.InlineKeyboardButton(f"üí∞ –°–æ–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å {income}TSC", callback_data="income"))

    await callback_query.message.edit_text(text, reply_markup=inline_keyboard)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'upgrade_roads')
async def upgrade_road_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    global current_road_level

    if user_id in last_command_executed:
        last_executed_time = last_command_executed[user_id]
        current_time = time.time()
        if current_time - last_executed_time < 1.5:
            await asyncio.sleep(1.5 - (current_time - last_executed_time))

    last_command_executed[user_id] = time.time()

    cursor.execute("SELECT road_level FROM towns WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_level = result[0]
    else:
        current_level = 0

    if current_level is not None:
        new_level = current_level + 1
    else:
        new_level = 1

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        balance = result[0]
    else:
        balance = 0

    upgrade_cost = 500 * (2 ** (new_level - 1))

    if balance >= upgrade_cost:
        if new_level <= 10000:
            cursor.execute("UPDATE towns SET road_level=? WHERE user_id=?", (new_level, user_id))
            conn.commit()

            new_balance = balance - upgrade_cost
            cursor.execute("UPDATE balances SET balance=? WHERE user_id=?", (new_balance, user_id))
            conn.commit()

            await callback_query.answer("–£—Ä–æ–≤–µ–Ω—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —É–ª—É—á—à–µ–Ω.", show_alert=True)

            current_road_level = new_level
            asyncio.create_task(perform_update_income(user_id))
        else:
            await callback_query.message.edit_text("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∑–¥–æ—Ä–æ–≤—å—è.")
    else:
        await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.", show_alert=True)

    cursor.execute(
        "SELECT name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income FROM towns WHERE user_id=?",
        (user_id,))
    result = cursor.fetchone()

    if not result:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.")
        return

    city_name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income = result

    army_level = army_level or 0
    health_level = health_level or 0
    courp_level = courp_level or 0
    road_level = road_level or 0
    dolar_level = dolar_level or 0
    food_level = food_level or 0
    build_level = build_level or 0

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    cursor.execute("SELECT income FROM user_income WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        income = result[0]
    else:
        income = 0

    text = f"üèØ–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {city_name}\n\nüõ°–ó–∞—â–∏—Ç–∞: {army_level}\nüíñ–ó–¥–æ—Ä–æ–≤—å–µ: {health_level}\n‚öñÔ∏è–ü–æ–ª–∏—Ç–∏–∫–∞: {courp_level}\n‚öîÔ∏è–í–æ–π—Å–∫–æ: {road_level}\nüè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {build_level}\nüìà–≠–∫–æ–Ω–æ–º–∏–∫–∞: {dolar_level}\nüåæ–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ: {food_level}\n\nüí∞–ë—é–¥–∂–µ—Ç –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞: {income}TSC\n\nüíéTSC –Ω–∞ —Å—á–µ—Ç—É: {current_balance}TSC"

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.row(types.InlineKeyboardButton("üõ° –ó–∞—â–∏—Ç–∞", callback_data="upgrade_army"),
                        types.InlineKeyboardButton("üíñ –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="upgrade_health"),
                        types.InlineKeyboardButton("‚öñÔ∏è –ü–æ–ª–∏—Ç–∏–∫–∞", callback_data="upgrade_courp"))
    inline_keyboard.row(types.InlineKeyboardButton("‚öîÔ∏è –í–æ–π—Å–∫–æ", callback_data="upgrade_road"),
                        types.InlineKeyboardButton("üè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", callback_data="upgrade_build"),
                        types.InlineKeyboardButton("üìà –≠–∫–æ–Ω–æ–º–∏–∫–∞", callback_data="upgrade_dolar"))
    inline_keyboard.row(types.InlineKeyboardButton("üåæ –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ", callback_data="upgrade_food"))
    inline_keyboard.row(types.InlineKeyboardButton(f"üí∞ –°–æ–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å {income}TSC", callback_data="income"))

    await callback_query.message.edit_text(text, reply_markup=inline_keyboard)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'upgrade_dolars')
async def upgrade_dolar_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    global current_dolar_level

    if user_id in last_command_executed:
        last_executed_time = last_command_executed[user_id]
        current_time = time.time()
        if current_time - last_executed_time < 1.5:
            await asyncio.sleep(1.5 - (current_time - last_executed_time))

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    last_command_executed[user_id] = time.time()

    cursor.execute("SELECT dolar_level FROM towns WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_level = result[0]
    else:
        current_level = 0

    if current_level is not None:
        new_level = current_level + 1
    else:
        new_level = 1

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        balance = result[0]
    else:
        balance = 0

    upgrade_cost = 500 * (2 ** (new_level - 1))

    if balance >= upgrade_cost:
        if new_level <= 10000:
            cursor.execute("UPDATE towns SET dolar_level=? WHERE user_id=?", (new_level, user_id))
            conn.commit()

            new_balance = balance - upgrade_cost
            cursor.execute("UPDATE balances SET balance=? WHERE user_id=?", (new_balance, user_id))
            conn.commit()

            await callback_query.answer("–£—Ä–æ–≤–µ–Ω—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —É–ª—É—á—à–µ–Ω.", show_alert=True)

            current_dolar_level = new_level
            asyncio.create_task(perform_update_income(user_id))
        else:
            await callback_query.message.edit_text("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∑–¥–æ—Ä–æ–≤—å—è.")
    else:
        await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.", show_alert=True)

    cursor.execute(
        "SELECT name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income FROM towns WHERE user_id=?",
        (user_id,))
    result = cursor.fetchone()

    if not result:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.")
        return

    city_name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income = result

    army_level = army_level or 0
    health_level = health_level or 0
    courp_level = courp_level or 0
    road_level = road_level or 0
    dolar_level = dolar_level or 0
    food_level = food_level or 0
    build_level = build_level or 0

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    cursor.execute("SELECT income FROM user_income WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        income = result[0]
    else:
        income = 0

    text = f"üèØ–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {city_name}\n\nüõ°–ó–∞—â–∏—Ç–∞: {army_level}\nüíñ–ó–¥–æ—Ä–æ–≤—å–µ: {health_level}\n‚öñÔ∏è–ü–æ–ª–∏—Ç–∏–∫–∞: {courp_level}\n‚öîÔ∏è–í–æ–π—Å–∫–æ: {road_level}\nüè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {build_level}\nüìà–≠–∫–æ–Ω–æ–º–∏–∫–∞: {dolar_level}\nüåæ–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ: {food_level}\n\nüí∞–ë—é–¥–∂–µ—Ç –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞: {income}TSC\n\nüíéTSC –Ω–∞ —Å—á–µ—Ç—É: {current_balance}TSC"

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.row(types.InlineKeyboardButton("üõ° –ó–∞—â–∏—Ç–∞", callback_data="upgrade_army"),
                        types.InlineKeyboardButton("üíñ –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="upgrade_health"),
                        types.InlineKeyboardButton("‚öñÔ∏è –ü–æ–ª–∏—Ç–∏–∫–∞", callback_data="upgrade_courp"))
    inline_keyboard.row(types.InlineKeyboardButton("‚öîÔ∏è –í–æ–π—Å–∫–æ", callback_data="upgrade_road"),
                        types.InlineKeyboardButton("üè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", callback_data="upgrade_build"),
                        types.InlineKeyboardButton("üìà –≠–∫–æ–Ω–æ–º–∏–∫–∞", callback_data="upgrade_dolar"))
    inline_keyboard.row(types.InlineKeyboardButton("üåæ –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ", callback_data="upgrade_food"))
    inline_keyboard.row(types.InlineKeyboardButton(f"üí∞ –°–æ–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å {income}TSC", callback_data="income"))

    await callback_query.message.edit_text(text, reply_markup=inline_keyboard)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'upgrade_foods')
async def upgrade_food_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    global current_food_level

    if user_id in last_command_executed:
        last_executed_time = last_command_executed[user_id]
        current_time = time.time()
        if current_time - last_executed_time < 1.5:
            await asyncio.sleep(1.5 - (current_time - last_executed_time))

    last_command_executed[user_id] = time.time()

    cursor.execute("SELECT food_level FROM towns WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_level = result[0]
    else:
        current_level = 0

    if current_level is not None:
        new_level = current_level + 1
    else:
        new_level = 1

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        balance = result[0]
    else:
        balance = 0

    upgrade_cost = 500 * (2 ** (new_level - 1))

    if balance >= upgrade_cost:
        if new_level <= 10000:
            cursor.execute("UPDATE towns SET food_level=? WHERE user_id=?", (new_level, user_id))
            conn.commit()

            new_balance = balance - upgrade_cost
            cursor.execute("UPDATE balances SET balance=? WHERE user_id=?", (new_balance, user_id))
            conn.commit()

            await callback_query.answer("–£—Ä–æ–≤–µ–Ω—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —É–ª—É—á—à–µ–Ω.", show_alert=True)

            current_food_level = new_level
            asyncio.create_task(perform_update_income(user_id))
        else:
            await callback_query.message.edit_text("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∑–¥–æ—Ä–æ–≤—å—è.")
    else:
        await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.", show_alert=True)

    cursor.execute(
        "SELECT name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income FROM towns WHERE user_id=?",
        (user_id,))
    result = cursor.fetchone()

    if not result:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.")
        return

    city_name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income = result

    army_level = army_level or 0
    health_level = health_level or 0
    courp_level = courp_level or 0
    road_level = road_level or 0
    dolar_level = dolar_level or 0
    food_level = food_level or 0
    build_level = build_level or 0

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    cursor.execute("SELECT income FROM user_income WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        income = result[0]
    else:
        income = 0

    text = f"üèØ–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {city_name}\n\nüõ°–ó–∞—â–∏—Ç–∞: {army_level}\nüíñ–ó–¥–æ—Ä–æ–≤—å–µ: {health_level}\n‚öñÔ∏è–ü–æ–ª–∏—Ç–∏–∫–∞: {courp_level}\n‚öîÔ∏è–í–æ–π—Å–∫–æ: {road_level}\nüè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {build_level}\nüìà–≠–∫–æ–Ω–æ–º–∏–∫–∞: {dolar_level}\nüåæ–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ: {food_level}\n\nüí∞–ë—é–¥–∂–µ—Ç –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞: {income}TSC\n\nüíéTSC –Ω–∞ —Å—á–µ—Ç—É: {current_balance}TSC"

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.row(types.InlineKeyboardButton("üõ° –ó–∞—â–∏—Ç–∞", callback_data="upgrade_army"),
                        types.InlineKeyboardButton("üíñ –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="upgrade_health"),
                        types.InlineKeyboardButton("‚öñÔ∏è –ü–æ–ª–∏—Ç–∏–∫–∞", callback_data="upgrade_courp"))
    inline_keyboard.row(types.InlineKeyboardButton("‚öîÔ∏è –í–æ–π—Å–∫–æ", callback_data="upgrade_road"),
                        types.InlineKeyboardButton("üè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", callback_data="upgrade_build"),
                        types.InlineKeyboardButton("üìà –≠–∫–æ–Ω–æ–º–∏–∫–∞", callback_data="upgrade_dolar"))
    inline_keyboard.row(types.InlineKeyboardButton("üåæ –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ", callback_data="upgrade_food"))
    inline_keyboard.row(types.InlineKeyboardButton(f"üí∞ –°–æ–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å {income}TSC", callback_data="income"))

    await callback_query.message.edit_text(text, reply_markup=inline_keyboard)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'upgrade_builds')
async def upgrade_build_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    global current_build_level

    if user_id in last_command_executed:
        last_executed_time = last_command_executed[user_id]
        current_time = time.time()
        if current_time - last_executed_time < 1.5:
            await asyncio.sleep(1.5 - (current_time - last_executed_time))

    last_command_executed[user_id] = time.time()

    cursor.execute("SELECT build_level FROM towns WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_level = result[0]
    else:
        current_level = 0

    if current_level is not None:
        new_level = current_level + 1
    else:
        new_level = 1

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        balance = result[0]
    else:
        balance = 0

    upgrade_cost = 500 * (2 ** (new_level - 1))

    if balance >= upgrade_cost:
        if new_level <= 10000:
            cursor.execute("UPDATE towns SET build_level=? WHERE user_id=?", (new_level, user_id))
            conn.commit()

            new_balance = balance - upgrade_cost
            cursor.execute("UPDATE balances SET balance=? WHERE user_id=?", (new_balance, user_id))
            conn.commit()

            await callback_query.answer("–£—Ä–æ–≤–µ–Ω—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —É–ª—É—á—à–µ–Ω.", show_alert=True)

            current_build_level = new_level
            asyncio.create_task(perform_update_income(user_id))
        else:
            await callback_query.message.edit_text("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∑–¥–æ—Ä–æ–≤—å—è.")
    else:
        await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.", show_alert=True)

    cursor.execute(
        "SELECT name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income FROM towns WHERE user_id=?",
        (user_id,))
    result = cursor.fetchone()

    if not result:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.")
        return

    city_name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income = result

    army_level = army_level or 0
    health_level = health_level or 0
    courp_level = courp_level or 0
    road_level = road_level or 0
    dolar_level = dolar_level or 0
    food_level = food_level or 0
    build_level = build_level or 0

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    cursor.execute("SELECT income FROM user_income WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        income = result[0]
    else:
        income = 0

    text = f"üèØ–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {city_name}\n\nüõ°–ó–∞—â–∏—Ç–∞: {army_level}\nüíñ–ó–¥–æ—Ä–æ–≤—å–µ: {health_level}\n‚öñÔ∏è–ü–æ–ª–∏—Ç–∏–∫–∞: {courp_level}\n‚öîÔ∏è–í–æ–π—Å–∫–æ: {road_level}\nüè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {build_level}\nüìà–≠–∫–æ–Ω–æ–º–∏–∫–∞: {dolar_level}\nüåæ–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ: {food_level}\n\nüí∞–ë—é–¥–∂–µ—Ç –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞: {income}TSC\n\nüíéTSC –Ω–∞ —Å—á–µ—Ç—É: {current_balance}TSC"

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.row(types.InlineKeyboardButton("üõ° –ó–∞—â–∏—Ç–∞", callback_data="upgrade_army"),
                        types.InlineKeyboardButton("üíñ –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="upgrade_health"),
                        types.InlineKeyboardButton("‚öñÔ∏è –ü–æ–ª–∏—Ç–∏–∫–∞", callback_data="upgrade_courp"))
    inline_keyboard.row(types.InlineKeyboardButton("‚öîÔ∏è –í–æ–π—Å–∫–æ", callback_data="upgrade_road"),
                        types.InlineKeyboardButton("üè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", callback_data="upgrade_build"),
                        types.InlineKeyboardButton("üìà –≠–∫–æ–Ω–æ–º–∏–∫–∞", callback_data="upgrade_dolar"))
    inline_keyboard.row(types.InlineKeyboardButton("üåæ –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ", callback_data="upgrade_food"))
    inline_keyboard.row(types.InlineKeyboardButton(f"üí∞ –°–æ–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å {income}TSC", callback_data="income"))

    await callback_query.message.edit_text(text, reply_markup=inline_keyboard)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'upgrade_courps')
async def upgrade_courp_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    global current_courp_level

    if user_id in last_command_executed:
        last_executed_time = last_command_executed[user_id]
        current_time = time.time()
        if current_time - last_executed_time < 1.5:
            await asyncio.sleep(1.5 - (current_time - last_executed_time))

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    last_command_executed[user_id] = time.time()

    cursor.execute("SELECT courp_level FROM towns WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_level = result[0]
    else:
        current_level = 0

    if current_level is not None:
        new_level = current_level + 1
    else:
        new_level = 1

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        balance = result[0]
    else:
        balance = 0

    upgrade_cost = 500 * (2 ** (new_level - 1))

    if balance >= upgrade_cost:
        if new_level <= 10000:
            cursor.execute("UPDATE towns SET courp_level=? WHERE user_id=?", (new_level, user_id))
            conn.commit()

            new_balance = balance - upgrade_cost
            cursor.execute("UPDATE balances SET balance=? WHERE user_id=?", (new_balance, user_id))
            conn.commit()

            await callback_query.answer("–£—Ä–æ–≤–µ–Ω—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —É–ª—É—á—à–µ–Ω.", show_alert=True)

            current_courp_level = new_level
            asyncio.create_task(perform_update_income(user_id))
        else:
            await callback_query.message.edit_text("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∑–¥–æ—Ä–æ–≤—å—è.")
    else:
        await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.", show_alert=True)

    cursor.execute(
        "SELECT name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income FROM towns WHERE user_id=?",
        (user_id,))
    result = cursor.fetchone()

    if not result:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.")
        return

    city_name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income = result

    army_level = army_level or 0
    health_level = health_level or 0
    courp_level = courp_level or 0
    road_level = road_level or 0
    dolar_level = dolar_level or 0
    food_level = food_level or 0
    build_level = build_level or 0

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    cursor.execute("SELECT income FROM user_income WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        income = result[0]
    else:
        income = 0

    text = f"üèØ–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {city_name}\n\nüõ°–ó–∞—â–∏—Ç–∞: {army_level}\nüíñ–ó–¥–æ—Ä–æ–≤—å–µ: {health_level}\n‚öñÔ∏è–ü–æ–ª–∏—Ç–∏–∫–∞: {courp_level}\n‚öîÔ∏è–í–æ–π—Å–∫–æ: {road_level}\nüè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {build_level}\nüìà–≠–∫–æ–Ω–æ–º–∏–∫–∞: {dolar_level}\nüåæ–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ: {food_level}\n\nüí∞–ë—é–¥–∂–µ—Ç –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞: {income}TSC\n\nüíéTSC –Ω–∞ —Å—á–µ—Ç—É: {current_balance}TSC"

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.row(types.InlineKeyboardButton("üõ° –ó–∞—â–∏—Ç–∞", callback_data="upgrade_army"),
                        types.InlineKeyboardButton("üíñ –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="upgrade_health"),
                        types.InlineKeyboardButton("‚öñÔ∏è –ü–æ–ª–∏—Ç–∏–∫–∞", callback_data="upgrade_courp"))
    inline_keyboard.row(types.InlineKeyboardButton("‚öîÔ∏è –í–æ–π—Å–∫–æ", callback_data="upgrade_road"),
                        types.InlineKeyboardButton("üè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", callback_data="upgrade_build"),
                        types.InlineKeyboardButton("üìà –≠–∫–æ–Ω–æ–º–∏–∫–∞", callback_data="upgrade_dolar"))
    inline_keyboard.row(types.InlineKeyboardButton("üåæ –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ", callback_data="upgrade_food"))
    inline_keyboard.row(types.InlineKeyboardButton(f"üí∞ –°–æ–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å {income}TSC", callback_data="income"))

    await callback_query.message.edit_text(text, reply_markup=inline_keyboard)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'upgrade_healths')
async def upgrade_health_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    global current_health_level

    if user_id in last_command_executed:
        last_executed_time = last_command_executed[user_id]
        current_time = time.time()
        if current_time - last_executed_time < 1.5:
            await asyncio.sleep(1.5 - (current_time - last_executed_time))

    last_command_executed[user_id] = time.time()

    cursor.execute("SELECT health_level FROM towns WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_level = result[0]
    else:
        current_level = 0

    if current_level is not None:
        new_level = current_level + 1
    else:
        new_level = 1

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        balance = result[0]
    else:
        balance = 0

    upgrade_cost = 500 * (2 ** (new_level - 1))

    if balance >= upgrade_cost:
        if new_level <= 10000:
            cursor.execute("UPDATE towns SET health_level=? WHERE user_id=?", (new_level, user_id))
            conn.commit()

            new_balance = balance - upgrade_cost
            cursor.execute("UPDATE balances SET balance=? WHERE user_id=?", (new_balance, user_id))
            conn.commit()

            await callback_query.answer("–£—Ä–æ–≤–µ–Ω—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —É–ª—É—á—à–µ–Ω.", show_alert=True)

            current_health_level = new_level
            asyncio.create_task(perform_update_income(user_id))
        else:
            await callback_query.message.edit_text("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∑–¥–æ—Ä–æ–≤—å—è.")
    else:
        await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.", show_alert=True)

    cursor.execute(
        "SELECT name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income FROM towns WHERE user_id=?",
        (user_id,))
    result = cursor.fetchone()

    if not result:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.")
        return

    city_name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income = result

    army_level = army_level or 0
    health_level = health_level or 0
    courp_level = courp_level or 0
    road_level = road_level or 0
    dolar_level = dolar_level or 0
    food_level = food_level or 0
    build_level = build_level or 0

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    cursor.execute("SELECT income FROM user_income WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        income = result[0]
    else:
        income = 0

    text = f"üèØ–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {city_name}\n\nüõ°–ó–∞—â–∏—Ç–∞: {army_level}\nüíñ–ó–¥–æ—Ä–æ–≤—å–µ: {health_level}\n‚öñÔ∏è–ü–æ–ª–∏—Ç–∏–∫–∞: {courp_level}\n‚öîÔ∏è–í–æ–π—Å–∫–æ: {road_level}\nüè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {build_level}\nüìà–≠–∫–æ–Ω–æ–º–∏–∫–∞: {dolar_level}\nüåæ–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ: {food_level}\n\nüí∞–ë—é–¥–∂–µ—Ç –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞: {income}TSC\n\nüíéTSC –Ω–∞ —Å—á–µ—Ç—É: {current_balance}TSC"

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.row(types.InlineKeyboardButton("üõ° –ó–∞—â–∏—Ç–∞", callback_data="upgrade_army"),
                        types.InlineKeyboardButton("üíñ –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="upgrade_health"),
                        types.InlineKeyboardButton("‚öñÔ∏è –ü–æ–ª–∏—Ç–∏–∫–∞", callback_data="upgrade_courp"))
    inline_keyboard.row(types.InlineKeyboardButton("‚öîÔ∏è –í–æ–π—Å–∫–æ", callback_data="upgrade_road"),
                        types.InlineKeyboardButton("üè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", callback_data="upgrade_build"),
                        types.InlineKeyboardButton("üìà –≠–∫–æ–Ω–æ–º–∏–∫–∞", callback_data="upgrade_dolar"))
    inline_keyboard.row(types.InlineKeyboardButton("üåæ –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ", callback_data="upgrade_food"))
    inline_keyboard.row(types.InlineKeyboardButton(f"üí∞ –°–æ–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å {income}TSC", callback_data="income"))

    await callback_query.message.edit_text(text, reply_markup=inline_keyboard)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'upgrade_confirm')
async def upgrade_army_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    global current_army_level

    if user_id in last_command_executed:
        last_executed_time = last_command_executed[user_id]
        current_time = time.time()
        if current_time - last_executed_time < 1.5:
            await asyncio.sleep(1.5 - (current_time - last_executed_time))

    last_command_executed[user_id] = time.time()

    cursor.execute("SELECT army_level FROM towns WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_level = result[0]
    else:
        current_level = 0

    if current_level is not None:
        new_level = current_level + 1
    else:
        new_level = 1

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        balance = result[0]
    else:
        balance = 0

    upgrade_cost = 500 * (2 ** (new_level - 1))

    if balance >= upgrade_cost:
        if new_level <= 10000:
            cursor.execute("UPDATE towns SET army_level=? WHERE user_id=?", (new_level, user_id))
            conn.commit()

            new_balance = balance - upgrade_cost
            cursor.execute("UPDATE balances SET balance=? WHERE user_id=?", (new_balance, user_id))
            conn.commit()

            await callback_query.answer("–£—Ä–æ–≤–µ–Ω—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —É–ª—É—á—à–µ–Ω.", show_alert=True)

            current_army_level = new_level
            asyncio.create_task(perform_update_income(user_id))
        else:
            await callback_query.message.edit_text("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∞—Ä–º–∏–∏.")
    else:
        await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.", show_alert=True)

    cursor.execute(
        "SELECT name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income FROM towns WHERE user_id=?",
        (user_id,))
    result = cursor.fetchone()

    if not result:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.")
        return

    city_name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level, upgraded_income = result

    army_level = army_level or 0
    health_level = health_level or 0
    courp_level = courp_level or 0
    road_level = road_level or 0
    dolar_level = dolar_level or 0
    food_level = food_level or 0
    build_level = build_level or 0

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    cursor.execute("SELECT income FROM user_income WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        income = result[0]
    else:
        income = 0

    text = f"üèØ–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {city_name}\n\nüõ°–ó–∞—â–∏—Ç–∞: {army_level}\nüíñ–ó–¥–æ—Ä–æ–≤—å–µ: {health_level}\n‚öñÔ∏è–ü–æ–ª–∏—Ç–∏–∫–∞: {courp_level}\n‚öîÔ∏è–í–æ–π—Å–∫–æ: {road_level}\nüè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {build_level}\nüìà–≠–∫–æ–Ω–æ–º–∏–∫–∞: {dolar_level}\nüåæ–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ: {food_level}\n\nüí∞–ë—é–¥–∂–µ—Ç –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞: {income}TSC\n\nüíéTSC –Ω–∞ —Å—á–µ—Ç—É: {current_balance}TSC"

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.row(types.InlineKeyboardButton("üõ° –ó–∞—â–∏—Ç–∞", callback_data="upgrade_army"),
                        types.InlineKeyboardButton("üíñ –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="upgrade_health"),
                        types.InlineKeyboardButton("‚öñÔ∏è –ü–æ–ª–∏—Ç–∏–∫–∞", callback_data="upgrade_courp"))
    inline_keyboard.row(types.InlineKeyboardButton("‚öîÔ∏è –í–æ–π—Å–∫–æ", callback_data="upgrade_road"),
                        types.InlineKeyboardButton("üè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", callback_data="upgrade_build"),
                        types.InlineKeyboardButton("üìà –≠–∫–æ–Ω–æ–º–∏–∫–∞", callback_data="upgrade_dolar"))
    inline_keyboard.row(types.InlineKeyboardButton("üåæ –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ", callback_data="upgrade_food"))
    inline_keyboard.row(types.InlineKeyboardButton(f"üí∞ –°–æ–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å {income}TSC", callback_data="income"))

    await callback_query.message.edit_text(text, reply_markup=inline_keyboard)


@dp.callback_query_handler(lambda c: c.data == 'back_town')
async def back_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    cursor.execute(
        "SELECT name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level FROM towns WHERE user_id=?",
        (user_id,))
    result = cursor.fetchone()

    if user_id in last_command_executed:
        last_executed_time = last_command_executed[user_id]
        current_time = time.time()
        if current_time - last_executed_time < 1.5:
            await asyncio.sleep(1.5 - (current_time - last_executed_time))

    last_command_executed[user_id] = time.time()

    if not result:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ.")
        return

    city_name, army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level = result

    army_level = army_level or 0
    health_level = health_level or 0
    courp_level = courp_level or 0
    road_level = road_level or 0
    dolar_level = dolar_level or 0
    food_level = food_level or 0
    build_level = build_level or 0

    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        current_balance = result[0]
    else:
        current_balance = 0

    cursor.execute("SELECT income FROM user_income WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        income = result[0]
    else:
        income = 0

    text = f"üèØ–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {city_name}\n\nüõ°–ó–∞—â–∏—Ç–∞: {army_level}\nüíñ–ó–¥–æ—Ä–æ–≤—å–µ: {health_level}\n‚öñÔ∏è–ü–æ–ª–∏—Ç–∏–∫–∞: {courp_level}\n‚öîÔ∏è–í–æ–π—Å–∫–æ: {road_level}\nüè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {build_level}\nüìà–≠–∫–æ–Ω–æ–º–∏–∫–∞: {dolar_level}\nüåæ–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ: {food_level}\n\nüí∞–ë—é–¥–∂–µ—Ç –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞: {income}TSC\n\nüíéTSC –Ω–∞ —Å—á–µ—Ç—É: {current_balance}TSC"

    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.row(types.InlineKeyboardButton("üõ° –ó–∞—â–∏—Ç–∞", callback_data="upgrade_army"),
                        types.InlineKeyboardButton("üíñ –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="upgrade_health"),
                        types.InlineKeyboardButton("‚öñÔ∏è –ü–æ–ª–∏—Ç–∏–∫–∞", callback_data="upgrade_courp"))
    inline_keyboard.row(types.InlineKeyboardButton("‚öîÔ∏è –í–æ–π—Å–∫–æ", callback_data="upgrade_road"),
                        types.InlineKeyboardButton("üè´ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", callback_data="upgrade_build"),
                        types.InlineKeyboardButton("üìà –≠–∫–æ–Ω–æ–º–∏–∫–∞", callback_data="upgrade_dolar"))
    inline_keyboard.row(types.InlineKeyboardButton("üåæ –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ", callback_data="upgrade_food"))
    inline_keyboard.row(types.InlineKeyboardButton(f"üí∞ –°–æ–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å {income}TSC", callback_data="income"))

    await callback_query.message.edit_text(text, reply_markup=inline_keyboard)


async def update_income(user_id: int):
    while True:
        cursor.execute(
            "SELECT army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level FROM towns WHERE user_id=?",
            (user_id,))
        result = cursor.fetchone()

        if result:
            current_army_level = result[0]
            current_health_level = result[1]
            current_courp_level = result[2]
            current_road_level = result[3]
            current_dolar_level = result[4]
            current_food_level = result[5]
            current_build_level = result[6]
        else:
            current_army_level = None
            current_health_level = None
            current_courp_level = None
            current_road_level = None
            current_dolar_level = None
            current_food_level = None
            current_build_level = None

        army_income = 1 * (2 ** current_army_level) if current_army_level is not None else 0
        health_income = 1 * (2 ** current_health_level) if current_health_level is not None else 0
        courp_income = 1 * (2 ** current_courp_level) if current_courp_level is not None else 0
        road_income = 1 * (2 ** current_road_level) if current_road_level is not None else 0
        dolar_income = 1 * (2 ** current_dolar_level) if current_dolar_level is not None else 0
        food_income = 1 * (2 ** current_food_level) if current_food_level is not None else 0
        build_income = 1 * (2 ** current_build_level) if current_build_level is not None else 0

        current_income = army_income + health_income + courp_income + road_income + dolar_income + food_income + build_income

        cursor.execute("SELECT income FROM user_income WHERE user_id=?", (user_id,))
        result = cursor.fetchone()
        if result:
            income = result[0]
        else:
            income = 0

        new_income = income + current_income

        cursor.execute("INSERT OR REPLACE INTO user_income (user_id, income) VALUES (?, ?)", (user_id, new_income))
        conn.commit()

        upgraded_army_income = 2 * (2 ** (current_army_level + 1)) if current_army_level is not None else 0
        upgraded_health_income = 2 * (2 ** (current_health_level + 1)) if current_health_level is not None else 0
        upgraded_courp_income = 2 * (2 ** (current_courp_level + 1)) if current_courp_level is not None else 0
        upgraded_road_income = 2 * (2 ** (current_road_level + 1)) if current_road_level is not None else 0
        upgraded_dolar_income = 2 * (2 ** (current_dolar_level + 1)) if current_dolar_level is not None else 0
        upgraded_food_income = 2 * (2 ** (current_food_level + 1)) if current_food_level is not None else 0
        upgraded_build_income = 2 * (2 ** (current_build_level + 1)) if current_build_level is not None else 0

        upgraded_income = upgraded_army_income + upgraded_health_income + upgraded_courp_income + upgraded_road_income + upgraded_dolar_income + upgraded_food_income + upgraded_build_income

        cursor.execute("UPDATE towns SET upgraded_income=? WHERE user_id=?", (upgraded_income, user_id))
        conn.commit()

        cursor.execute("SELECT upgraded_income FROM towns WHERE user_id=?", (user_id,))
        result = cursor.fetchone()
        if result:
            current_upgraded_income = result[0]
        else:
            current_upgraded_income = 0

        if current_upgraded_income != upgraded_income:
            cursor.execute("UPDATE towns SET upgraded_income=? WHERE user_id=?", (upgraded_income, user_id))
            conn.commit()
            current_upgraded_income = upgraded_income

        hourly_income = current_income
        partial_income = int(hourly_income / 720)

        while True:
            await asyncio.sleep(5)

            cursor.execute("SELECT income FROM user_income WHERE user_id=?", (user_id,))
            result = cursor.fetchone()
            if result:
                income = result[0]
            else:
                income = 0

            new_income = income + partial_income

            cursor.execute("INSERT OR REPLACE INTO user_income (user_id, income) VALUES (?, ?)", (user_id, new_income))
            conn.commit()

            cursor.execute("SELECT upgraded_income FROM towns WHERE user_id=?", (user_id,))
            result = cursor.fetchone()

            if result:
                current_upgraded_income = result[0]
            else:
                current_upgraded_income = 0

            if current_upgraded_income != upgraded_income:
                cursor.execute("UPDATE towns SET upgraded_income=? WHERE user_id=?", (upgraded_income, user_id))
                conn.commit()

            cursor.execute(
                "SELECT army_level, health_level, courp_level, road_level, dolar_level, food_level, build_level FROM towns WHERE user_id=?",
                (user_id,))
            result = cursor.fetchone()

            if result:
                current_army_level = result[0]
                current_health_level = result[1]
                current_courp_level = result[2]
                current_road_level = result[3]
                current_dolar_level = result[4]
                current_food_level = result[5]
                current_build_level = result[6]
            else:
                current_army_level = None
                current_health_level = None
                current_courp_level = None
                current_road_level = None
                current_dolar_level = None
                current_food_level = None
                current_build_level = None

            army_income = 1 * (2 ** current_army_level) if current_army_level is not None else 0
            health_income = 1 * (2 ** current_health_level) if current_health_level is not None else 0
            courp_income = 1 * (2 ** current_courp_level) if current_courp_level is not None else 0
            road_income = 1 * (2 ** current_road_level) if current_road_level is not None else 0
            dolar_income = 1 * (2 ** current_dolar_level) if current_dolar_level is not None else 0
            food_income = 1 * (2 ** current_food_level) if current_food_level is not None else 0
            build_income = 1 * (2 ** current_build_level) if current_build_level is not None else 0

            current_income = army_income + health_income + courp_income + road_income + dolar_income + food_income + build_income

            upgraded_army_income = 2 * (2 ** (current_army_level + 1)) if current_army_level is not None else 0
            upgraded_health_income = 2 * (2 ** (current_health_level + 1)) if current_health_level is not None else 0
            upgraded_courp_income = 2 * (2 ** (current_courp_level + 1)) if current_courp_level is not None else 0
            upgraded_road_income = 2 * (2 ** (current_road_level + 1)) if current_road_level is not None else 0
            upgraded_dolar_income = 2 * (2 ** (current_dolar_level + 1)) if current_dolar_level is not None else 0
            upgraded_food_income = 2 * (2 ** (current_food_level + 1)) if current_food_level is not None else 0
            upgraded_build_income = 2 * (2 ** (current_build_level + 1)) if current_build_level is not None else 0

            upgraded_income = upgraded_army_income + upgraded_health_income + upgraded_courp_income + upgraded_road_income + upgraded_dolar_income + upgraded_food_income + upgraded_build_income

            if upgraded_income != current_upgraded_income:
                cursor.execute("UPDATE towns SET upgraded_income=? WHERE user_id=?", (upgraded_income, user_id))
                conn.commit()
                current_upgraded_income = upgraded_income

            hourly_income = current_income
            partial_income = int(hourly_income / 720)


def update_user_balance(user_id, balance):
    with sqlite3.connect("bot_data.db") as conn:
        cursor = conn.cursor()
        cursor.execute("CREATE TABLE IF NOT EXISTS balances (user_id INTEGER PRIMARY KEY, balance TEXT)")
        cursor.execute("SELECT balance FROM balances WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()

        if result:
            current_balance = int(result[0])
        else:
            current_balance = 0

        new_balance = current_balance + int(balance)

        cursor.execute("INSERT OR REPLACE INTO balances (user_id, balance) VALUES (?, ?)", (user_id, str(new_balance)))
        conn.commit()


def get_user_balance(user_id):
    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        return result[0]
    else:
        return 0


def get_last_collect_time(user_id):
    return time.time() - 3600


def update_last_collect_time(user_id, timestamp):
    pass


def get_last_mine_command_time(user_id):
    return balances.get(f"{user_id}_last_mine_command_time", 0)


def save_last_mine_command_time(user_id, timestamp):
    balances[f"{user_id}_last_mine_command_time"] = timestamp


async def perform_update_income(user_id):
    global is_update_income_running

    if not is_update_income_running.get(user_id, False):
        is_update_income_running[user_id] = True
        await update_income(user_id)
        is_update_income_running[user_id] = False


async def update_income_task(user_id):
    while True:
        await perform_update_income(user_id)
        await asyncio.sleep(5)

    user_ids = get_all_user_ids()

    is_update_income_running = {}

    for user_id in user_ids:
        asyncio.create_task(update_income_task(user_id))



async def on():
    user_should_be_notified = -1001592098459
    await bot.send_message(user_should_be_notified, '–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª—Å—è...#restart\n\n@RudeusNG @FremanMQ')
    while True:
        await bot.send_message(chat_id='-1001592098459', text='–°–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω...')
        await asyncio.sleep(120)
keep_alive()
if __name__ == '__main__':
    on_start = asyncio.get_event_loop()
    on_start.create_task(on())
    asyncio.run(aiogram.executor.start_polling(dp, skip_updates=True))
    loop = asyncio.get_event_loop()
    loop.create_task(perform_update_income())
    executor.start_polling(dp, skip_updates=True)